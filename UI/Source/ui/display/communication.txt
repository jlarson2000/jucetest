

Actions usually have an immediate effect, or at least a percieved immediate effect

Some actions may have the effect delayed for a long time
  quantized functions
  most notable quantized function is loop switch
  scripts are sort of like functions that can have a long runtime


Parameters are not usually quantized, does that ever make sense?
But they do have interrupt delay, the time between asking a parameter to
change and the engine actually incorporating it can take a few milliseconds
During this period if the client reads the value of the parameter it will appear
to not have changed

The paramater application delay can result in UI anomolies like "snapping back"
most obviously for control parameters like output level

Parameters then have a "pending" and "actual" states, the client needs to know
when something is pending or actual

MobiusState servies as a nice view of the engine for the client
  engine upates state directly, though it could have a layer underneath
  that uses a communication protocol to remotely retrieve state
  "remote mobius" is this interesting?
    collaborative looping, difficult to sync, lots of data transfer, table this

How does the engine communicate back to the client

Original used the Export concept which is similar to a more granular form of
MobiusState, "I am interested in track 2 output level, notify me when this changes"

Push notificatons are different than just maintaining a stable read-only state
for the UI. Push could be implemented on top of MobiusState with a polling period.
But ideally the push needs to happen as close to the actual activation as possible.
The engine can post changes to be broadcast above the interrupt
  currently a combination of MobiusThread events with millisecond resolution
  and Exports

Since there is so much going on in the engine, posting change events for everything
is not feasiable.  That's the difference between MobiusState and Exports.  MobiusState
is an optimzied read-only view of engine state, primarily for the UI.  Exports are
more like Listeners.

I like the term Listener since that's used heavily in UI technologies.

Distinguish between Parameters and runtime state

"Track 2 Loop Play Frame" is not a parameter, it is a number that represents engine state
that can be displayed and will be updated by the engine but it cannot be set directly by
the client.  Possible names
  RuntimeParameter
  StateVariable
  ReadOnlyParameter

Hah, MobiusState is close to Waveset "views" the UI reads them and they have a regular structure
that can be traversed with "paths" like OSC paths.  Not a generic Map data model though it
could be.  Maps are more costly to read/write don't like that as the primary interface
between client/engine, but you can implement a Map interface on top of that.  That's basically
what the OSC layer did.

SettableParameter is a number (or ordinal to something with a name).  It has a stable value
that can is used by the engine to influence behavior.  It cannot be set directly by the client
you must "request" that it be changed.  Currently doing this with Actions.

Engine may delay the activation of the request.
Engine may ignore the request.
Engine may change the value of the parameter at any time after the request.
Client can never assume that a requested parameter value will "stick".  It must always
ask for the current value.

ReadOnlyParameters can only be changed as a side effect of requesting a change to
a writable parameter or by the request of a Function.

Differences between parameter and function

  Parameter
    a named integer
    bool is just a special case of integer
    float is probably interesting
    integer values may have fixed labels (enumerations)
    pararameters may reference things that have unfixed labels
      usually these are configuration objects, Preset, Setup, Bindings
      all such things have an ordinal number that may be used to reference it without the name
      are there any purely text things that can't be pre-defined and given ordinals?
        warning messages, generated by the engine for display
          since there can't be many of these can use the old "error codes" but still need
          variable arguments
        user variables in scripts
          user could want to store an arbitrary string somewhere, but could be limited
          to numbers?
          user variables are kind of like variable arg lists or "specs" e.g. 1-4 to indiciate
          a range of track numbers
          only in the domain of scripts since it requires user-defined logic to interpret
          THINK: numeric parameters work for the engine because logic is fixed and can
            always be implemented to interpret things numerically
            scripts break that because the data model they consume and produce can be arbitrary

Going back...

State Variable
  single numeric read-only value representing the runtime state of the engine
  variables may be scoped if they appear more than once in several contexts
    (global, track, loop, layer, script?)
    hmm yes, a script is like a user defined scope, or rather can scripts DEFINE variables
      yes that's what UserVariable was, arbitrary named values that can be associated with
      engine objects

Variable Scope
  a variable may be replicated in more than one context
  contexts are usually identifiable by number, the exception is script context

Parameter
  a State Variable that may be modified by the client
  all Parameters are State Variables but not the other way around
  modificiations must be submitted by request and request application may be delayed

Parameter Package
  a collection of Parameters that may be requsted as a unit
  typically stored offline for later recall
  aka bundle, collection, class, think in terms of classes and members
  packages have names and ordinals for identification

Can Variables and Parameters have ordinals?
  think of a parameter as a simple package with only one member
  allows for referencing quickly e.g. instead of
     set subcycles 4
     set 42 4

  sure, it's kind of like "machine code" for the engine but not especally useful and makes
  it difficult for the client programmer, but this would be useful for mapping between
  parameter defintiions, e.g. UIParameter->InternalParameter
  where InternalParameter has a lot more implementation details

Variable Definition
  all variables (and therefore parameters) have a definition that describes
  characteristics of the parameter
    name, value labels, scope limitations, package references?
      e.g. variable "preset" is an ordinal of a package
  yeah, we're getting close to classes and instances
  Parameters need concrete Variable Definitions to help the UI understand and present them
  State Variables less so, really? what's the difference
    "subcycles" needs a definition so the UI can present editing forms to set them
    since State Variables can't be modified by the user, the client can hard code logic
    around them
    but really they are conceptually the similar, state variables have an implicit definition
    state varibles are relatively fixed, parameters definitions are more likely to change

Function
  a command that can be sent to the engine to perform a usually complex task
  aka. how a function call in a language is different than setting a variable
  functions do not really have values, though in a way the Mode is kind of like
  the value of some functions but many do not have modes, mode is an optional side
  effect that can be tested

  functions have arguments that can influence their behavior
  parameter bindings with relative operators (inc/dec) are really functions
    "set subcycles inc 2" is not really setting a parameter it is like calling a function
    doFunction SetParameter name:subcycles, operator: inc, value: 2
    this could be encapdulated in a script
      doFunction RunScript SetSubcyclesInc2
        so the complex operation on subcycle can be reduced to an ordinal script identifier

     yes, bindings are really just a simplified representation of a script implemented
      by the client, do not need to have the concept of bindings in the engine
      liking this, it's a "client services" layer, things that are not in the engine
      but are supplied by engine developers to make client development easier, client could
      implement it's own binding mechanism (OSC is one) but it would not be required
        THINK: can we implement OSC on top of bindings or is it a peer

Point: yes there is still a fundenantal difference between variables and functions keep that

Need to get back to reality for the moment, keep think of these concepts

  Variable  read-only
  Parameter read-write
  Function  command which can be built-in or script

Only Parameter and Function need to be exposed to the end-user for actions

A function can be "on" "off" or "instant"
  so in that respect they are similar to Parameters
    set Record 1
  hmm, does this make thigns easier or more complicated?
  that's basically what Target does, encapsulates a set of action targets which
  may be functions or parameters

So really Target is below or a base of Function and Parameter
  a named thing that can be acted upon

Still liking Targets and Actions
  though TargetDefinition in code could be a base class of Parameter and Function

Disliking Variable to mean read-only state since that use usually implies
read-write in programming languges.  the concepts are

  ReadOnlyVariable, aka state variable
  ReadWriteVariable, aka Parameter whose definition is fixed
  UserVariable, defined by user but could be read-only or read-write
    distinction probably not important

Go back

   Variable: named value with behavior properties
     value type (really just numeric and symbolic)
     value range
       (high, low for numeric)
     value labels
       symbolic values for numberic values, a form of range?
     read-only


Maybe System vs. User Variables

SystemVariable
  things defined by the engine
UserVariable
  thigns defined by the UI/user

Variable: named value with properties
State Variables:  are System Variables that are read-only
Parameters are System Variables that are read-write
User Variables are arbitrary but still Variables
Functions are not Variables
Constants: name value that does not change

Liking this, getting close to common programming conventions

Don't need the difference betweeen SystemConstnt and UserConstant
  constancy could be a property of a UserVarialbe

Liking this, Variables can have Properties that defines characteristics
 of the named value

Object - a collection of variables
  usually parameters
  not functions, though that moves it toward OOP

subcycles is a parameter (read-write variable with peroperties)
Preset is an object (or really an instance of class Preset)

shit, might as well go full OOP

Class: definition of a collection of variables, e.g. Preset class
Instance: instaition of a class, a Preset object

For implementation purposes we really don't need to distinguish between
classes and objects, the term "preset" always refers to an instance and
how that is structured is built-in to the engine

Wow, that was a digression...back to the UI

MobiusState
  a collection/package of StateVariables

Preset, Setup
  a collection/package of Parameters

Ah, now we're getting to the problem I remember...some Parameters
can have multiple implementations.

The "subcycles" parameter is implemented as a value within a Preset
but this could be copied to a System Variable which can be different
than one is in the preset object.

Parameter with Track scope are more obvious.  The UI needs an impementation
of these that reads/write into a Setup object.

But the engine does not use Setup as it's runtime model, it copies those
values and changes them often, until the Reset function is performed which
restores those values to what is in the preset.

Parameters can behave that way but only when set in scripts.

What do we call this "backing model".  The definition of a Parameter is the
same regarding it's name and properties of the value but the instantiation
is different.  In effect a Parameter is an interface that can be implemented
in several ways.  Is this class/instance?

   Parameter is a class, parameter stored in a Preset is an instance
   Parameter outputLevel may be stored in a Setup or copied internally
     and exposed as a System Variable

Interesting SystemVarialbes can be derived from Parameters
So some System Variables will have concrete definitions, others are implicit

Keep thinking about this...whew need to focus

MobiusState
  really liking this as a single point of communication of System Variables
  between the engine and the client

Action
  a request sent by the client into the engine
  may execute a function
  may request the changing of a parameter

Response
  actions typically have a response though the client may not be interested in it
  "this variable has finally been set" (asynchronous)
  "this function has started"
  "this function has completed"
  "this request has been delayed until"

  Responses can be immediate (synchronous) or delayed (asynchronous)

If a client is interested in a delayed response it must request interest
  response can be conveyed by polling, needs an immediate response with
  an id that can be polled
  response can be sent asynchronously
    do not want to do this for every action, only those that want it since
    there are so many things that could generate a response

Okay, there is a difference between an action response and an asynchronous notification

ActionResponse
  the client asked for something and wants to know when it is finished

AutomaticResponse
  the system tells the client when something happens

Is an ActionResponse a form of AutomaticResponse?  Sort of

With an AutomaticResponse, the client registers a Listener to receive
notification of the response.  Responses can be sent without any further
action by the client.

With an Action, the client registers a Listener to receive notification
  of action completion.  Once the response is sent the Listener is no
  longer valid.

Listener Lifespan
  indefinite, receieves notifications until it is turned off by the client

  scoped, client receives notifications only for a period of time
    must be some state that defines the lifespan of the scope

How about a Listener on an Action?

Listener on a state variable
  I want notification whenever this variable changes
  I don't care why it changed or what caused it to change
  This is what OSC or MIDI export wants
    send MIDI CC whenever output level changes
    send OSC message when presets change to refresh a UI

Listener on an action
  I want notification when this variable changes, but I
  need to know if it was because I requested it or not
  If I requsted this change but it was delayed I should stop
  asking for it again
  If I requsted this change but it was changed by something
  else to a different value I want to give up and accept that
  the change won't be made.
  While waiting for my change I want to display the proposed value
  so the user knows that the request was made but not processed.
   ! this is the key point

  While waiting for my change I want to display the proposed value
  for awhile until it times out, then I'll accept the actual value.
    this is really just a state variable listener with a timeout

  responses like this require extra state, the action payload that was
  requested, or the ID of something that represents that action

Alright, so we do need this concept

Export
  registration of a listener on a state variable with notifications
  automatically sent when it changes

  only variables with an explicitly registered listener are sent

  requires an object to define what to export
  object must be owned by the engine, but it can be registered
  by the user

  user needs a handle to something that doesn't just get deleted out
  from under it?  With a Listener model, the client owns the listener
  object but not the object it was attached to.  Listeners can become detatched
    e.g. register listener for this menu item, menu is reconfigured and the
      item no longer exists.  client is still waiting for the notification
      but the client has no object handle representing the menu item, the
      item actually acted upon is passed to the listener

With an action listener the client needs to be associate a notification
with the action that was requested

Try some examples:

  Action action...client constructs and owns an action
  engine->doAction(action)
    engine begings performing the action, and the function call returns
    client retains ownership of the action
    engine needs to copy relevant state from the action
    client may abandon the action or wait for a response

Response styles

Original action is the response target
  Action object continues to live and engine updates it with a response
  Requires that the client keep the Action object alive while the engine is using it
  Don't like this since Action maybe a member variabe that changes if the UI
  is reconfigured

Engine returns a response object
  engine constructs and maintains ownership of a Response object
  engine updates Response to indiciates status
  response ownership
    server: ensures that the server can update the response if
      the UI forgets about it, but since the UI can be watching it
      it can't be deleted, it would have to be moved to an inactive
      response list until the client says it is okay to abandon
      could result in garbage
    client: engine has a pointer to the obejct and updates it,
      once the action has finished the response is garbage and the engine
      no longer uses it
      client must keep the object alive until the server is done with it
      if the client forgets about it, it becomes garbage

Shared objects are have ugly lifespans
  server ownership lifetime is unstable, object can't be deleted when done
  because the client won't know when that is
  server ownership results in garbage if the client forgets about it
    e.g. server marks response as completed and forgets about it
      server MUST not delete the object becasause the client is polling it
      object moves to the inactive list and is garbage

  client ownership is similar
       client polls the object and deletes it when the server is done
       client MUST NOT delete the object while the server is using it

Feels like garbage is less likely with client ownership since it will always
have something, the "pending response" list it can look at, if the server owns
it would need an interface like engine->getPendingResponses to watch.

I don't think the old interned Export concept works well here, that's okay
for automatic responses but less for action responses.  if the Export is given an Action
then we have action lifespan issues.

Response ids

  action = ...client builds an action
  int id = server->doAction(action)
     server does it's thing, allocates an action id and returns it
     server maintains internal response state
     response state is deleted when finished

  status = server->getResponse(id);
    server cheks response and returns INVALID if the response has finished

This eliminates the ownership of the response object but can't convey as much
information.  Just "still there" or "don't have it, it must be done".  If the client
needs any more state, then a list of completed actions has to be kept and these
become garbage if the client forgets about them.

Can return more than just an ID, client is responsible for deleting it
  useful for things like "it will happen at this time" but still
  can't convey complex completion status

Completion status obects
  server is asked to do an action, forgets about the action, but assigns it an id
  when the action is done, server creates a response object and sends it to the client
  response object contains the id
  client matches the response id with whatever internal action state it wants to maintain
  client is responsible for deleting the object

This is more like a listener but need to think about lifespan
  if the client can be notified with a function call, the response object only
  lives for the duration of that call, yes, this is like MouseEvent, MouseEvent
  is not guaranteed to live beyond the duration of that call, client must copy
  information out of it

Now we're getting somewhere.   Shared objects suck.

Registered objects, e.g. Exports are okay but the client cannot depend on the
lifespan of the object that defined the export, only the behavior.   Well sort of
with the Listener concept, client must keep the listener object alive.

  int id = server->doRequest(actionObject);
    server copies action object and maintains internal state
    server allocates an id to identify the request and return it
    client saves the request id somewhere
    server maintains internal state about the request, client has only the id
     alt: server could return a complex object but it must be freed, don't like it
     if complex return is necessary client must provide an object
     server-doRequest(actionObject, responseObject)
        server fills in response object and forgets about it
        Java would just return a response and let it become garbage
        C++ can return a response and require it be deleted, but it's uglier

  ...server does it's thing, request completes...

  client->actionFinished(responseObject)
    response includes the action id
    client locates internal state related that id
    client copies what it needs from responseObject
    responseObject becomes invalid when this call completes

nicer interms of object ownership
client can still garbage it's action state, but that's independent of the server
I like that if garbage is going to accumulate it happens in the client,
the server is always in a "clean" state

Listener model

A variant of the above but server calls a method when done

  int id = server->doRequest(actionObject, actionListener)

  ...server does it's thing...

  actionListener->actionPerformed(responseObject);

about the same but gives the client more flexibility in dispatching
on the response rather than
   requyestState = search for request matching id
it can be
  allocate request object implementing listener
  listener has all it needs right away

actually client->actionFinished is the same, what is "client"
in order to have an object to call the method on something would
have to be provided to the server, like a session

  server->registerClient(client)
     client->response

That's really the same as a listener, just for all actions so

   Server s = MobiusInterface::getServer();
   // Server object lives until s->close() is called
   s->addActionListener(listener);
   // listener must live as long as Server
   listener->actionPerformed(response)
   // response only lasts for the duration of this call

Similar to Exports, but Export defines the model of what to listen for
as apposed to having lots of listener targets

  server->addOutputLevelListener(int track, Listener* l);

vs.

  server->addListener(ListenerTarget* target, Listener* l);
    where target defines track, loop, parameter, etc.
    Listener is called when that changes

or

class MobiusListener
{
  void outputLevelChanged(int track, int level);
  void inputLevelChanged(int track, int level);
  ...

More Java/JUCE like but requires a LOT of methods
MobiusState conveys most of this

So really MobiusState is kind of an optimzized listener, you
watch it for changes rather than being notified

Do like the optimization, watch this state object for most
changes.  For complex things where the nature of the change
is more important or may need a more timely notification,
use listeners.  Really exports could be implemented as a layer
above MobiusState, the only thing Listner provides is breaking
out of the polling wait loop.

Some things can wait and poll, some things need to be immediate.
Immediate things require extra effort.

Like putting the listener on the action, keeps from having a ton
of interface methods and provides more flexibility in the client,
it can either create response specific objects or have one that
just does a big switch.

class Action
  ...stuff about the action target and arguments...
  // optional listener object to be informed when this action
  // completes
  ActionListener listener;
    

Now we're getting somewhere.
this is the callback registration, actions can have listeners or not
don't need another server interface for callback registration like Export,
just use a listener

Threading issues

when and where are listeners called
can be called synchrously by doAction?
  kind of weird control flow but would work, we're in the main UI thread
  need to make sure listener is prepared at the moment of the call
can't call them in the interrupt because they can have undefined side effects
  most actions will be processed in the interrupt so have to schedule events
  need a thread for event processing

the notion of an event queue for comms between the interrupt and above
is already there, currently the MobiusThread, but this can move to the
client.  All the server needs is a handle to the thread so it can schedule events

Ugh, that's the complication.  Since we can't call the listener directly
we have to capture all the state necessary and put it on an event queue.
Events then become that shared object again.  Server creates an object and
puts it on the queue.  Once on the queu it is owned by the client and must
be consumed by it.  If the client forgets it becomes garbage.

Can't really prevent that, we need this for thigns besides action responses.
But there will be internal events that are just for comms between the engine
interrupt and engine supervisor.  Client events are for comm between the
interrupt and the client.  I suppose the engine supervisor could also post
client events, but what thread is that running in.  Don't want engine to
maintain it's own thread so client needs to call it:

   ClientThread
     at periodic interval
       update UI
       server->performMaintanance()

So Server gets told to do periodic things above the interrupt under control
of the client.  This is where listeners can be called.

But this must be initiate by the client so server doesn't have to maintain it's own thread.
Nice because it makes listener context predictable, it can't conflict with
udpating the UI.

If engine maintas it's own thread then the will be conflicts with the UI thread.

Juce also has it's own thread which we already have issues with.  I think this
is the "main thread" or something which is that csect we have to deal with
in the plugin's application thread.

  Juce thread
    controls painting
  Plugin thread
    watches for state changes and tells Juce to repaint
  Interrupt
    audio thread where Mobius engine runs

Interrupt can't know about Juce thread, only Plugin thread
If plugin thread causes engine Listeners to be called, Listeners
can't do any painting but that's consistent with what things in
the plugin thread are allowed to do as long as it's clear where
listeners are called.

If Mobius maintaned it's own thread, it saves having
to call server->performMaintenance but then it really complicates
listener context.  Mobius thread would have to schedule another
set of events on the plugin thread.  Mobius thread could only be used
for internal operations if listeners are called here then they
would have to know now to paint or touch Juce.

Yeah, really liking having a single thread.

Gak, where are we...

Just those three threads with engine->performMaintenance

Needs to be a shared event queue between client and engine
Events can be pooled for performaance
Event lifespan needs to be clear since both the client and
the server needs to create them.  Would the Juce thread
need to create events?  Maybe, probably not.  Painting
would not need to schedule events, but where are things
like menuListeners performed.  Or MouseEvents?

This is interesting, for most things like ActionButtons
or really anything that wants to call Server->doAction
this must be in the Juce thread.  Are there two Juce threads?

What does the painting and what calls MouseListener?
This seems critical.  Since Juce listeners can have complex
side effects on plugin state, they must be independent.
Listeners can request a repaint via repaint() but they can't draw.
resized() can request a repaint() but they can't draw.

Whatever the case PluginThread and Interrupt don't
have to know as long as you assume painting and plugin logic
are on different threads, this needs to be expolored.
paint() can never call doAction.  But MouseEvent must
be allowed to call doAction and we already know this
is on a different thread than the one the plugin creates.

So back to the Mobius event queue.

This is shared between by these threads

  JuceThread
    calls MouseListener which calls doAction
    manages plugin operations
    sets Component values
    asks that things be repainted
    cannot paint?
    where are we when we build out the Components
    and initialize the plugin state?
  MobiusThread
    calls server->performMaintenance
    calls display->update
  Audio Interrupt
    engine needs to tell MobiusThread to do things
    does not know about Juce

There needs to be thread synchronizaion on adding and removing
things to the event queue

Event creation cannot be performed in the audio interrupt it
must take them from a pool

MobiusThread is allowed to allocate memory and can keep the
event pool full

Audio Interrupt must behave gracefully if it is not allowed to schedule
an event if the pool is empty

Client ultimately needs to be in control over the event queue
but this can be pushed under the MobiusInterface

Keep the implementatation of the event queue seperate from the
old event queue, make it new and nice

MobiusInterface can handle the mapping between the new
queue and the old one for now, and eventually can replace all
the old code.

For a BRIEF time might be able to allow coexistence of the
new event queue and the old one?  Really like to say no, but
might work as long as we're careful.  Probably not necessary
since it was mostly used for the UI, but also for some
above/below engine synchronization like phasing in configuration
changes.

Either way this is all handled under engine->performMaintenance

Ultimately we need this

  class MobiusEventQueue
    manages a pool of MobiusEvent objects
    manages adding/removing events from the queue
    shared by multiple threads
    events on this queue may only be of interest for a particular thread
    events that are not of interest to one thread need to be left untouched

e.g. interrupt needs to tell supervisor to do something that the UI doesn't care about
     interrupt needs to tell the UI to refresh something it is watching
     supervisor needs to tell the UI about something, but this can be done with Listeners
       supervisor/UI comms doesn't need to use the event queue
       UI->supervisor calls MobiusInterface directly
       supervisor->UI calls use Listeners AFTER removing something from the event queue
         put there by the interrupt

okay key concept, who puts things on the event queue, use these terms consistsntly

   client: the UI or something wrapping the engine
   engine/server: receives direct calls from the client, consists of two things
     supervisor: code that runs above interrupt
     interrupt: code in the audio interace

I use interrupt pretty consistenty but need to clarify engine/supervisor.

Already using Supervisor as the thing that manages both the UI and the engine.
Engine works but is pretty generic, I guess go with that for now.  "core" is the same as "interrupt".  MobiusSupervisor I like but is confusing with UISupervisor.  Or maybe not since
we now have bifurcated models UIAction vs. InternalAction, etc.

Client is synonomous with UI but UI is shorter.

Mobius is too generic, but really that is the Engine, it could be above or below the engine.
Would like to reserve Mobius to be the interface between the client/server.
Maybe just Server isn't bad.  Server receives calls to the interrupt and directs it to the interrupt/core.  Kind of like the Server concept elsewhere, it wraps something that is complicated.

Yes, go with that, there is client code and server code and server code and be above or
below the interrupt.

Okay with that said who puts things on the event queue

interrupt puts things on the queue for the server
server puts things on the queue for the interrupt

server does not need to use the queue for the client, it uses listeners and exports

client does not necessarily need access to the queue unless it
wants to handle interrupt events directly

can the server handle all consumption of the queue?  if the interrupt
needs to tell the client something, it can ask the server, then the
server uses listeners

I'm liking that, keeps queue management within the server

Threading still exists but there are only two, server and interrupt
and the server thread is the same as the client thread.

Yes, I like this start with the event queue inside the server.  Why
would the client ever need to know.  In the old model there were events
attached to actions but that can be handled at the server boundary
by keeping UIAction and ServerAction separate which we already want to do.

Immediate use cases:

change output level
  client calls server->doAction(UIAction)
    UIAction can optionally contain a Listener
  server either handles the change immediately to the Track model or schedules an event
  in this case it is immediate
  client continues and assumes it is done

change loop
  client calls server->doAction(UIAction)
  server returns ACTION_QUEUED status
    yes, like knowing this
    if ACTION_QUEUED the UIAction will have an actionId set as a side effect
    do not want a complex ActionResult object returned that has to be deleted
    all immediate results can be returned in the UIAction
    not model pollution since both UIAction and UIActionResult are part of the client model
      this should be enough for now, but need to think about immediate actions that
      do want complex results like error message
  server maintains internal state realted to the actionId
    only ever a handful of these
  client can remember the current state and desired state and display them appropriately
    ahh, where is this stored, it can't nicely be in MobiusState, or can it?
    a parallel MobiusSate might work but deciding which is authorative is complicated
      have the unset vs. set problem with integers
  time passes
  loop switch completes
  interrupt notifies server, how?  just by changing the loop number in internal objects
  server needs to know to call the action listener
    interrupt posting an event is messy and overkill since the interrupt can't know
    everything the server is interested in unless it consults the activeActions list
    which has thread issues
    alternately, as part of each maintenance cycle, server looks at the list of
    pendingActions to see if they are done
  when pendingAction is done, server calls the action listener

What indiciates "done"
  server can compare the requested and actual values in most cases
  if there isn't a single value to compare the interrupt may need to notify
  it with an event
  ahh, this is an issue, how does a generic PendingAction objects know what to look for?
  we have a similar Target problem, the object can't have code necessary
  for all possible "check for done" implementations, might need PendingAction subclasses

  PendingAction model feels nice, but will need to pool them
  try to make the interrupt independent of PendingAction?  It will have it's own internal
  event queue which is kind of the same

  yeah, this gets messy but we can push that for now

The main thing is that UIAction results in PendingAction internally and we can
play with the implementation of that later.

Now, do we need an ActionResponse object?

For simple things all we need is actionPerformed and make the UI remember
related state.  Nice to be able to convey message though.

Concept: messages
  really convenient for the interrupt, server, and scripts to pass arbitrary
  text back to the client. Need some standard for that

Yes, need ActionResponse to contain the original actionId optional information message
and flesh out what  else it contains later.

TODO:

MobiusInterface::doAction
  returns a status code
    ACTION_COMPLETE, ACTION_QUEUED, ACTION_FAILED, etc.
    sets UIAction.actionID

UIAction::Listener
  interface of something that wants to be notified
  void actionPerformed(UIActionResult result)

PendingAction
  internal server object to track queued actions

Future thoughts
  can an action change things in a previous pending action?
  may want an actionChanged listener callback

MobiusEventQueue
  internal object to manage communication between interrupt and server
  can be hidden from the client, can start with the old one

MobiusInterface::addListener
  registers listener for things outside of UIActions
  void refreshUI()
     called to break out of wait loop

  other things as necesary
  could have actionPerformed here if they choose not to use
  action specific listeners

put UIActionResult under model
put the listeners inside MobiusInterface



