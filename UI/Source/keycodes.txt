Thu Feb 22 11:02:06 2024

An exhausting analysis of what the fuck Juce keycodes
mean and how they map to physical keys for binding.
Skip to Executive Summary below...

Key codes from 0-255

decimal hex getTextCharacter() getTextDescription()

0 00000000 0 
1 00000001 0 #1
2 00000002 0 #2
3 00000003 0 #3
4 00000004 0 #4
5 00000005 0 #5
6 00000006 0 #6
7 00000007 0 #7
8 00000008 0 backspace
9 00000009 0 tab
10 0000000a 0 #a
11 0000000b 0 #b
12 0000000c 0 #c
13 0000000d 0 return
14 0000000e 0 #e
15 0000000f 0 #f
16 00000010 0 #10
17 00000011 0 #11
18 00000012 0 #12
19 00000013 0 #13
20 00000014 0 #14
21 00000015 0 #15
22 00000016 0 #16
23 00000017 0 #17
24 00000018 0 #18
25 00000019 0 #19
26 0000001a 0 #1a
27 0000001b 0 escape
28 0000001c 0 #1c
29 0000001d 0 #1d
30 0000001e 0 #1e
31 0000001f 0 #1f
32 00000020 0 spacebar
33 00000021 0 !
34 00000022 0 "
35 00000023 0 #
36 00000024 0 $
37 00000025 0 %
38 00000026 0 &
39 00000027 0 '
40 00000028 0 (
41 00000029 0 )
42 0000002a 0 *
43 0000002b 0 +
44 0000002c 0 ,
45 0000002d 0 -
46 0000002e 0 .
47 0000002f 0 /
48 00000030 0 0
49 00000031 0 1
50 00000032 0 2
51 00000033 0 3
52 00000034 0 4
53 00000035 0 5
54 00000036 0 6
55 00000037 0 7
56 00000038 0 8
57 00000039 0 9
58 0000003a 0 :
59 0000003b 0 ;
60 0000003c 0 <
61 0000003d 0 =
62 0000003e 0 >
63 0000003f 0 ?
64 00000040 0 @
65 00000041 0 A
66 00000042 0 B
67 00000043 0 C
68 00000044 0 D
69 00000045 0 E
70 00000046 0 F
71 00000047 0 G
72 00000048 0 H
73 00000049 0 I
74 0000004a 0 J
75 0000004b 0 K
76 0000004c 0 L
77 0000004d 0 M
78 0000004e 0 N
79 0000004f 0 O
80 00000050 0 P
81 00000051 0 Q
82 00000052 0 R
83 00000053 0 S
84 00000054 0 T
85 00000055 0 U
86 00000056 0 V
87 00000057 0 W
88 00000058 0 X
89 00000059 0 Y
90 0000005a 0 Z
91 0000005b 0 [
92 0000005c 0 \
93 0000005d 0 ]
94 0000005e 0 ^
95 0000005f 0 _
96 00000060 0 `
97 00000061 0 A
98 00000062 0 B
99 00000063 0 C
100 00000064 0 D
101 00000065 0 E
102 00000066 0 F
103 00000067 0 G
104 00000068 0 H
105 00000069 0 I
106 0000006a 0 J
107 0000006b 0 K
108 0000006c 0 L
109 0000006d 0 M
110 0000006e 0 N
111 0000006f 0 O
112 00000070 0 P
113 00000071 0 Q
114 00000072 0 R
115 00000073 0 S
116 00000074 0 T
117 00000075 0 U
118 00000076 0 V
119 00000077 0 W
120 00000078 0 X
121 00000079 0 Y
122 0000007a 0 Z
123 0000007b 0 {
124 0000007c 0 |
125 0000007d 0 }
126 0000007e 0 ~
127 0000007f 0 
128 00000080 0 Â€
129 00000081 0 Â
130 00000082 0 Â‚
131 00000083 0 Âƒ
132 00000084 0 Â„
133 00000085 0 Â…
134 00000086 0 Â†
135 00000087 0 Â‡
136 00000088 0 Âˆ
137 00000089 0 Â‰
138 0000008a 0 ÂŠ
139 0000008b 0 Â‹
140 0000008c 0 ÂŒ
141 0000008d 0 Â
142 0000008e 0 ÂŽ
143 0000008f 0 Â
144 00000090 0 Â
145 00000091 0 Â‘
146 00000092 0 Â’
147 00000093 0 Â“
148 00000094 0 Â”
149 00000095 0 Â•
150 00000096 0 Â–
151 00000097 0 Â—
152 00000098 0 Â˜
153 00000099 0 Â™
154 0000009a 0 Âš
155 0000009b 0 Â›
156 0000009c 0 Âœ
157 0000009d 0 Â
158 0000009e 0 Âž
159 0000009f 0 ÂŸ
160 000000a0 0 Â 
161 000000a1 0 Â¡
162 000000a2 0 Â¢
163 000000a3 0 Â£
164 000000a4 0 Â¤
165 000000a5 0 Â¥
166 000000a6 0 Â¦
167 000000a7 0 Â§
168 000000a8 0 Â¨
169 000000a9 0 Â©
170 000000aa 0 Âª
171 000000ab 0 Â«
172 000000ac 0 Â¬
173 000000ad 0 Â­
174 000000ae 0 Â®
175 000000af 0 Â¯
176 000000b0 0 #b0
177 000000b1 0 #b1
178 000000b2 0 #b2
179 000000b3 0 #b3
180 000000b4 0 #b4
181 000000b5 0 #b5
182 000000b6 0 #b6
183 000000b7 0 #b7
184 000000b8 0 #b8
185 000000b9 0 #b9
186 000000ba 0 #ba
187 000000bb 0 #bb
188 000000bc 0 #bc
189 000000bd 0 #bd
190 000000be 0 #be
191 000000bf 0 #bf
192 000000c0 0 #c0
193 000000c1 0 #c1
194 000000c2 0 #c2
195 000000c3 0 #c3
196 000000c4 0 #c4
197 000000c5 0 #c5
198 000000c6 0 #c6
199 000000c7 0 #c7
200 000000c8 0 #c8
201 000000c9 0 #c9
202 000000ca 0 #ca
203 000000cb 0 #cb
204 000000cc 0 #cc
205 000000cd 0 #cd
206 000000ce 0 #ce
207 000000cf 0 #cf
208 000000d0 0 #d0
209 000000d1 0 #d1
210 000000d2 0 #d2
211 000000d3 0 #d3
212 000000d4 0 #d4
213 000000d5 0 #d5
214 000000d6 0 #d6
215 000000d7 0 #d7
216 000000d8 0 #d8
217 000000d9 0 #d9
218 000000da 0 #da
219 000000db 0 #db
220 000000dc 0 #dc
221 000000dd 0 #dd
222 000000de 0 #de
223 000000df 0 #df
224 000000e0 0 #e0
225 000000e1 0 #e1
226 000000e2 0 #e2
227 000000e3 0 #e3
228 000000e4 0 #e4
229 000000e5 0 #e5
230 000000e6 0 #e6
231 000000e7 0 #e7
232 000000e8 0 #e8
233 000000e9 0 #e9
234 000000ea 0 #ea
235 000000eb 0 #eb
236 000000ec 0 #ec
237 000000ed 0 #ed
238 000000ee 0 #ee
239 000000ef 0 #ef
240 000000f0 0 #f0
241 000000f1 0 #f1
242 000000f2 0 #f2
243 000000f3 0 #f3
244 000000f4 0 #f4
245 000000f5 0 #f5
246 000000f6 0 #f6
247 000000f7 0 #f7
248 000000f8 0 #f8
249 000000f9 0 #f9
250 000000fa 0 #fa
251 000000fb 0 #fb
252 000000fc 0 #fc
253 000000fd 0 #fd
254 000000fe 0 #fe
255 000000ff 0 #ff

----------------------------------------------------------------------

Responses from keyPressed

dec hex mods getTextCharacter() getTextDescription() GetKeyString()

A   65 x41 0 97 A A

  that's ASCII A modes 97 is weird though, getTextCharacter() may not do what I thought

Yeah, my conversion is broken
  ; nothing
  ' Right

Fn keys come in weird

65648 00010070 00000000 0 F1 F1
65649 00010071 00000000 0 F2 F2
65650 00010072 00000000 0 F3 F3
65651 00010073 00000000 0 F4 F4
65652 00010074 00000000 0 F5 F5
65653 00010075 00000000 0 F6 F6
65654 00010076 00000000 0 F7 F7
65655 00010077 00000000 0 F8 F8
65656 00010078 00000000 0 F9 F9
65657 00010079 00000000 0 F10 F10
65658 0001007a 00000000 0 F11 F11
65659 0001007b 00000000 0 F12 F12

note that F12 generate a break under VisualStudio

Arrow keys

65573 00010025 00000000 0 cursor left Left
65576 00010028 00000000 0 cursor down Down
65575 00010027 00000000 0 cursor right Right
65574 00010026 00000000 0 cursor up Up


Command keys

65582 0001002e 00000000 0 delete Delete
65571 00010023 00000000 0 end End
65570 00010022 00000000 0 page down Page Down
65581 0001002d 00000000 0 insert Insert
65572 00010024 00000000 0 home Home
65569 00010021 00000000 0 page up Page Up

PRTSC is intercepted by the OS
SCRLK does nothing
PAUSE generates
0 00000000 00000000 0

Don't have a number pad

So the keys with large codes all have bit 17 set for some reason

x70 for F1 is this without the bit
  112 00000070 0 P

So you can't just mask off the bottom two bytes and see them.

My key mapper has F1 as x70 which does match

Bottom line, throw away the old key mapper

But I still don't understand....

P is 80 00000050 00000000 112 P P
F1 is 65648 00010070 00000000 0 F1 F1
  which matches mind if you mask off 0x70

But when generating numeric key code of 0x70 without
bit 17 it shows
  112 00000070 0 P

where P is getTextDescription

So Juce thinks both 0101 0000 and 0111 0000 are are "P" 
 for getTextDescription

This is bad because I can't just store the bottom two bytes for F1
and have it convert to text F1 without bit 17, maybe this is unicode?

Yes, unicode x70 is "latin small p" in Unicode

https://unicodelookup.com/

Juce seems to be using Unicode for converting codes to text
but Unicode doesn't have F1

Yes juce_wchar is he same as wchar_t which is 32 bit
x21
Apple uses NSF1FunctionKey which is 0xF704

The Javascript key code for F1 is 112 decimal which is 0x70
Ugh, I'm not understanding.

The problem is, if I use Juce's key code for F1 00010070
I can't use that in a 1 byte jump table.  If I mask off just
the 0x70 I have something that can be recognized internally as F1
but to display it in the UI getTextDescription will show "P"
which seems wrong since Unicode x70 is lower case p

Similar for LeftArrow
  65573 00010025 00000000 0 cursor left Left

Masking off x25 would be seen as
  37 00000025 0 %

% is Shift-5

which when you press it is

  53 00000035 00000001 37 shift + 5 5

So what getTextDescription displays as % is not actually a key combination
you can press.

I'll need two jump tables, one for those withoout bit 17 set where 0x70
would never be seen, and another for the bit 17 characters which would be sparse

If I collapse those, can I make a rule

if code between x70 and x7b, add bit 17 to get F1 displayed
if code between x25 and x26, add bit 17 to get arrows
if code between x2e and x21, add bit 17 to get commands

need to check num pad

Can this simply be a jump table conversion?

In the Binding always store the full 3 byte Juce code,
Juce displays and parses that correctly.

When building the jump table mask off the bottom byte.

So without modifier keys 0x70 can only be generated by the F1 key
There are no keyboard keys that can generate code 122/x70 which
would display as upper P or lower p in Unicode and the p key
comes in as, fuck x50 I'm getting these mixed up

just look at the fucking numbers

Letter keys: x41 to x5a like ascii
Number keys: x30 to x39 like ascii
back quote/tilde x60
- x2d
= x3d
backspace x08
, x2c
. x2e
/ x2f
[ x5b
] x5d
\ x5c

left   x10025
down   x10028
right  x10027
up     x10026

  these do not conflict with the other 0x20 range

F1-F12  x10070 to x1007b

  no conflict with x70 range

delete x2e
end    x23
pgdn   x22
ins    x2d
home   x24
pgup   x21

conflicts!

x2e is . and delete
x2d is - and insert

---

number pad with num lock

Alienware keyboard

1 10061
2 10062
3 10063
4 10064
5 10065
6 10066

now it gets weird

7 generates two codes
  10067 numpad 7
  1007a F11

8 10068 numpad 8
  1007b F12

9 10069 numpad 9
  10022 page down

0 10060 numpad 0
.    2e

enter
  now THIS gets interesting
  did not get a KeyCode for this, nor do I for the main ENTER/RETURN
  instead I got a button click event on the Record button, either the OS
  or Juce are intercepting this and turning it into mouse clicks and Juce
  I guess picks the first button component, if I click Reset next to it
  enter now activates that

+ generates two codes
  2b +
  10023 end

- 2d
* 2a
/ 2f
  these are interesting

without Numlock

1 10023 end
2 10028 cursor down (arrow)
3 10022 page down
4 10025 cursor left
5 00000 KeyPress event with all zeros and no text display
6 10027 cursor right

now we're back to double keys
7 10024 home and 1007b F11
8 10026 cursor up and 1007b F12
9 10021 page up AND 10022 page down

This could be a bug in Juce, but it makes the number pad practically useless
because of the double keys

It's unreliable anyway because of the NumLock which isn't obvious

If you want to support NumLock would have to suppress the
phantom F11, F12, and page down for 7,8,9
note that numpad . is 2e which is the same as the normal .

- x2d is the same as regular - and conflicts with 1002d insert
+ x2b is a unique code since standard + is shift equal
      but it double sends 10012 end

* x2a is unique and does not double send
/ x2f is the same as the main key

Without Numlock

the usual cursor keys work, but the send the same codes as
the other arrows so you can't bind them differently

So...ignoring the number pad which is a mess

Executive Summary

The basic problem is, Juce doesn't pass raw scan codes, it interprets
them and apparently has bugs in some of them so this limits what is reliable
which isn't so bad.

Letters and numbers (not number pad) are okay
F1-F12 are okay if you mask off x10000

punctuation keys work but conflict with command keys if you mask off x10000
we can just not recommend command keys, some may work, others won't

backspace, tab, esc work
  these are the only odd keys that might be useful

Stay the ever loving fuck away from the number pad, and the command keys.
Some will work sometimes, but they double key events and are unreliable.

For bindings and the binding UI the rules are:

  Store the full Juce key code in Bindings to get 0x10000 for Function keys
  and others, and to allow getTextDescription to display properly.

  For the action mapping table, can mask off the bottom byte without
  conflicts except for the DEL and INS command keys which you don't
  want to use anyway.





