Configuration Model

Independent classes that define operating and display characteristics
Editable in the UI
Can be serialized to XML for file storage
Can be serialized to a UI specific DTO

MobiusConfig
  global paraeters
  Preset
    preset parameters
  Setup
    setup parameters, wait are these exposed as parameters?
    SetupTrack
      track parameters
      UserVariables
  BindingConfig
    Binding
  ScriptConfig
    ScriptRef
  SampleConfig
    Sample

Runtime model

Most of the configuration model plus 
  Mobius internal classes derived from the configuration model
  Internal classes are not serialiable
  
  BindingCache
    compiled from the BindingCconfig, resolves triggers and targets
  ScriptCache
    compiled from the ScriptConfig, contains compiled Scripts
  Samplecache
    compiled from the SampleConfig, contains loaded samples
  OscCache
    compiled from the OscConfig

  where are host parameters, part of the BindingCache?

Mobius Engine
  divided into two parts
    upper: code above the audio interrupt
      handle configuration changes and build untime caches
      responds to stimulus from the UI or triggers and schedules events
       for the core
      handles all dynamic memory management
      maintains a thread for periodic maintenance
        handles export of state
      possible names: controller, monitor, executor,
      
    lower: code within the audio interrupt
      possible names: core
      may need to move MIDI handling down here the way Juce works
      uses very few OS services
        critical sections
        midi output?
        
Communiation between the controller and core must be strictly controlled
  very little code sharing
  controller tells the core to do things with events
  core tells the controller to do things with thread events
  do scripts always run in the core?'





----------------------------------------------------------------------
Parameter

Design is unfortunately mixed with model and implementation
get/set values requires the associated object, e.g. Preset or MobiusConfig
would be nice if this could be factored out

since parameters must have unique names, flattening all this into a Map for
use internally has nice properties

don't like Xml rendering built in to the config objects, factor this out
to an XmlRenderer
  means we can have other serialization formats

job 1: get config objects clean data models with no dependence on Parameter or XML
  hmm, where would min/max value checking live?

better to make this Parameter oriented or config object oriented?
  parameters define a single point of definition independent of how
  it is modeled, some values like preset parameters need to be track specific

  track setup parameters are mostly track specific with some globals

high and ordinals are overloaded to deal with values that have variable ranges
 such as preset numbers and enumerations that need to be dealt with in bindings
 and exported parameters as numeric values

getOrdinalValue
  - returns the numeric value for something that is an enumeration

getOrdinalLabel
  - returns the symbolic value for an ordinal

The editor does not really need to redirect through Parameter, though it
does encapsulate some of the logic about which field in an object to get/set

A single point DTO transformer would do this, would be similar to XML transformation
if you put that all in one place.  Hmm, this has some nice side effects

The only tricky bits are parameters that don't have fixed properties
  - max value for config object names
  - things with max globally configured elsewhere
  - could do this by dynamically modifying the Parameter object as things change
    - hmm, liking this

parameters with multiple values are annoying but this is really just a runtime thing
not something for the editor
  - exports and bindings would need this
  - parameter could have a track array of values
  - this would also be the place to put transient values from scripts rather than
    modifying the internal config objects
  - config objects are loaded and edited then "applied" to the parameters

Liking this, it makes Parameter self contained with things orbiting it to get/set values

multithreaded danger is things that have variable enumerations like preset names

since this is almost all in binding and export, which will change anyway it doesn't
impact the engine much
  main difference is that the engine now needs to go to Parameter for operating state
  not Preset/Setup, etc.
  some danger with enum mismatch, the parameter value must be numeric and mapped to an enum
  for code



----------------------------------------------------------------------

Source Organization

Utilities
  various generic utilities for programming
  much of this was OS portability that can be replaced with Juce
    move to the container interface
      critical sections, threads
  some of this was before the widespread adoption of the standard library
    can move to std:: in core but not Juce

UI
  all things related to Juce and display
  file handling, other OS related resources
  think of this as the "container", core Mobius should have very container access
  and do it through a well defined interface

External Control
  closely related to the UI, non-GUI things that can cause Mobius to do things
  MIDI, keyboard, plugin parameters, osc
  most if not all is now provided by Juce

Model
  Mobius configuration to be edited by the UI
    presets, setups, global config, bindings
    UI specific configuration
  Mobius state that can be observed and changed
    parameters, controls
  Things mobius can do
    actions functions

Core
  implementation of Mobius functionality
  all audio interupt code
  tracks, loops, layers, audio buffers

Juce organization
  top-level: UI, container implementation
  util
  model, container interface
  core
  
  
  
  

----------------------------------------------------------------------

static variables

statics are generally considered bad for plugins because they last for the duration of the
containing process, not the duration of the plugin

they are available to multiple instances of the plugin which can be handy if careful
in my case no one has multiple instances of Mobius, and even if they did, duplicating
the statics is not a big deal

statics containing large data structrures, like samples or wavetables make more sense

Jules hates them because they are destructed after Juce deinitializes, for me
this is not bad since I only ever use them for immutable data like parameter and function definitions

Alternative is to define some kind of state object them in a member variable of the audio processor
isntance and pass it down everywhere.  I don't like that.

I guess a better alternative is to define it in a member variable, but then use a static
pointer to that so it is destructed with the plugin and all the code that would reference
that would be gone by then.


Paramter high value
  some parameters like track group numbers have a high value configured
  as a track parameter
  others like selected preset and setup can be extended

  this requires access to the configuration objects to make the decision
  currently passing down MobiusInterface* into the getters

  option 1:
    have a thread local point at the a root configuartion object
  option 2:
    have the Parameter objects be self contained and allow their high value
    to be set
      - kind of lean toward this

  questions:
    how locked in is the parameter description passed from the plugin to the host
    can we change characteristics dynamically?


----------------------------------------------------------------------

Parameter Editing

Can be mostly data driven
Use a local model independent of Mobius model for development and testing

Will closely parallel current Mobius classes
  SystemConstant
  Parameter
  PresetParameter
  etc.

Work toward making this the new model
Avoid Mobius dependencies
Avoid UI dependencies

Parameter

  scope: global, preset, track
  name: internal reference name
  displayName: name to show in the UI
  type: int, bool, enum, string


names
  internal names not necessary for the UI, but are for scripts
  so keep them together

dynamic
  some parameters can change values and max ordinals
  "preset" for example is a set of user defined names
  "trackCount" is the number of tracks which is configurable

  skip dynamic initially?

values
  need a modern way to hold typed values, ExValue replacement
  modern way to initialize string arrays
  
enumerations
  will have both an internal and display name
    skip for now?
  need a modern way to map between text names and numeric value
  

  
----------------------------------------------------------------------

Config Header
  displays title and border
  no actions

Config Footer
  displays configurable buttons
  forwards action to parent

ConfigPanel
  displays header/footer/content
  forwards footer button to subclass for appropriate action
  informs parent that it is done


Wrapping the panel inside the Popup makes subclassing complicated

to the popup, the panel has buttons, how it is structured internally doesn't matter

what do we subclass, the panel or the popup?

Nice to have popup just display the panel in a few ways but not care what it is
  means this can't use automatic members

class PresetPanel : ConfigPanel {"Presets", ButtonSave | ButtonCancel};

ways of showing a configuration panel

  dialog window
    heavy weight, needs a modal wait loop

  simple compoment
    easiest, arbitrary position


  slider
    I guess like a simple component, just slides in and out

yeah, keep the panel where the guts are and contain it in something

