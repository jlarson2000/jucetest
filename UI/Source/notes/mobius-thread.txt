
KernelMessage
  - bi-directional but are mostly sent from the shell to the kernel
  - expected to have a limited lifespan
    - periodic logs will warn about potential leaks if they are out of the
      pool for long periods of time
      - will they?
  - limited payload, only a single object pointer

KernelEvent
  - uni-directional, sent by kernel to shell, never created by shell
  - more complex payload
  - may be a simple notification
  - may require a response
  - events that require responses have undefined lifespan out of the pool
  - uses KernelMessage to pass from kernel to shell and back

Could merge this with KernelMessage but I'm liking keeping the differences
separate.  Very simple events could just be KernelMessage

   TimeBoundary

Only for events created outside of scripts that can't wait on them.

Note that MobiusThread::addEvent keeps them in order.  If we pass these
through KernelCommunicator one at a time will need reverse them.

Yeah, TimeBoundary had special treatment:

/**
 * Added for the one-shot TE_TIME_BOUNDARY event which can happen
 * a lot so avoid allocating a ThreadEvent.  
 *
 * NOTE: Since TE_TIME_BOUNDARY is important to make the UI 
 * flashers look synchronized we effectively can only use the one shot
 * event for TE_TIME_BOUNDARY, I suppose if we miss a few it won't matter
 * but we can't use it for things that must have guaranteed delivery 
 * like TE_GLOBAL_RESET.
 */
void MobiusThread::addEvent(ThreadEventType tet)
{
	mOneShot = tet;
	//signal();
}


 * The listener is considered the owner of the Prompt and must call
 * Mobius::finishPrompt when it is done.  The Prompt contains a 
 * ThreadEvent the script interpreter may be waiting on.  The listener
 * *must not* delete the Prompt which will also delete the ThreadEvent
 * out from under the interpreter.  It *must* call Mobius::finishPrompt.

Here is the magic bit for waits

/**
 * When we're done processing an event, send it back to Mobius
 * so it can notify any ScriptInterpreters that might be waiting on it.
 *
 * This creates an action with a special trigger and target so it can
 * be deferred until the next interrupt.
 */
void MobiusThread::finishEvent(ThreadEvent* e)
{
    Action* a = mMobius->newAction();
    a->trigger = TriggerThread;
    a->setTarget(ActionScript);

    // this is a little unusual because we use this
    // for an input to the action and it's usually a return
    a->setThreadEvent(e);

    mMobius->doAction(a);
}

Kind of convoluted, let's follow!

void Actionator::doActionNow(Action* a)
{
    else if (t == ActionScript) {
        doScriptNotification(a);
    }


void Actionator::doScriptNotification(Action* a)
{
    if (a->trigger != TriggerThread)
      Trace(1, "Unexpected script notification trigger!\n");

    // unusual way of passing this in, but target object didn't seem
    // to make sense
    ThreadEvent* te = a->getThreadEvent();
    if (te == NULL)
      Trace(1, "Script notification action without ThreadEvent!\n");
    else {
        for (ScriptInterpreter* si = mMobius->getScripts() ; si != NULL ; 
             si = si->getNext()) {

            // this won't advance the script, it just prunes the reference
            si->finishEvent(te);
        }

        // The ThreadEvent is officially over, we get to reclaim it
        a->setThreadEvent(NULL);
        delete te;
    }
}


So the Action doesn't really accomplish anything except hide what's going on.
Don't need to keep that.

It's nice that the ThreadEvent doesn't point at the ScriptInterpreter

Oh hey, ScriptRuntime duplicated this:

void ScriptRuntime::doScriptNotification(Action* a)
{

Here's the meat:

/**
 * Called by MobiusThread when it finishes processing events we scheduled.
 * Note we don't run here since we're not in the audio interrupt thread.
 * Just remove the reference, the script will advance on the next interrupt.
 */
void ScriptInterpreter::finishEvent(ThreadEvent* te)
{
	bool ours = false;

	if (mStack != NULL)
	  ours = mStack->finishWait(te);

	// Since we're dealing with another thread, it is possible
	// that the thread could notify us before the interpreter gets
	// to a "Wait thread", it is important that we NULL out the last
	// thread event so the Wait does't try to wait for an invalid event.

	if (mLastThreadEvent == te) {
		mLastThreadEvent = NULL;
		ours = true;
	}

	// If we know this was our event, capture the return code for
	// later use in scripts.  
	if (ours)
	  mReturnCode = te->getReturnCode();
}

bool ScriptStack::finishWait(ThreadEvent* e)
{
	bool finished = false;
 
	if (mWaitThreadEvent == e) {
		mWaitThreadEvent = NULL;
		finished = true;
	}

	if (mStack != NULL) {
		if (mStack->finishWait(e))
		  finished = true;
	}

	return finished;
}

What's changed now is that doAction used to be called in the in the
MobiusThread, so it would be modifying the ScriptInterpreter model outside
the interrupt!  This seems bad, but rare and mostly limited to the unit tests.

This won't work the same since the consumers of KernelEvent will either be the UI
thread or our private maintenance thread, and it isn't allowed to make Actions directly.
Yeah, the whole finishEvent process will be different now.

Before
   ScriptInterpreter/ScriptStack
     add ThreadEvent to the queue
     save the ThreadEvent in ScriptStack::mWaitThreadEvent

   MobiusThread
     pop the ThreadEvent from the queue
     do the thing
     finishEvent
       newAction, trigger=TriggerThread, target=ActionScript
       a->setThreadEvent(e)
       mMobius->doAction()
          pretty sure the logic would have ended up being deferred to interrupt

    recorderMonitorEnter
      doInterruptActions
        doActionNow
          doScriptNotifications
            for each ScriptInterpreter
              si::finishEvent
                ScriptStack::finishWait
                  set finished flag
            return back to doScriptNotifications
            delete ThreadEvent

So the comments down in SI were wrong, we are in the interrupt and could have continued
the script, but this will happen anyway because in recorderMonitorEnter we process
interrupt actions before doScriptMaintenance

New:
   ScriptInterpreter/ScriptStack
     add KernelEvent to the queue
     save the KernelEvent in ScriptStack::mWaitThreadEvent

   MobiusShell::performMaintenance
     consumeCommunications
       pop KernelMessage containing the KernelEvent
       do the thing
       if not Prompt
         return KernelMessage/KernelEvent 

   MobiusKernel::consumeCommunciations
     pop KernelMessage containing the KernelEvent
     ! magic go get the KernelEvent into the ScriptInterpreters
     delete KernelEvent
     abandon KernelMessage

The timing is about the same, except that by using KernelMessage to send
the event back down rather than doAction, it will be processed BEFORE any
UIActions that also happen to be ready.  This shouldn't matter.

However if we still want to convert those TO actions, it's a different timing
of Actionator use which may not be prepped at this point.  Since all this does
is reach into the ScriptInterpreters and sets a flag it shouldn't matter, but it
feels weird to be using Action for this.  It was necessary before because Action
was they only way to pass things from shell to kernel, but now we have KernelMessage.

We can skip using Actions altogether and just have a KernelMessage handler for
MsgKernelEvent that does the same thing immediately.

Prompt is the only weird one

When MobiusShell gets that KernelEvent it builds a Prompt object, stashes the
KernelEvent in the Prompt and passes it to the UI.  The UI is expected to do the
interaction without molesting the Prompt or the ThreadEvent and it could leak which
is not disruptive.  When the UI is done it calls MobiusInterface::finishPrompt which
then uses KernelCommunicator to pass the ThreadEvent back down the same way.

We can take TriggerThread and ActionScript out of the Action model now I think.


----------------------------------------------------------------------


MobiusThread was the way for what was the equivalent of the
shell and kernel to communicate.

ThreadEvent is used by
  Mobius
  Action
  Actionator
  Projector (inactive, save/load stuff)

  and the big one: Script and ScriptRuntime

typedef enum {

	TE_NONE,
	TE_WAIT,
    TE_SAVE_LOOP,
    TE_SAVE_AUDIO,
    TE_SAVE_PROJECT,
    TE_SAVE_CONFIG,
    TE_LOAD,
    TE_DIFF,
    TE_DIFF_AUDIO,
	TE_TIME_BOUNDARY,
	TE_ECHO,
	TE_PROMPT,
	TE_GLOBAL_RESET

} ThreadEventType;

Script.cpp:			ThreadEvent* te = new ThreadEvent(TE_WAIT);

Actionator.cpp:            ThreadEvent* te = new ThreadEvent(TE_SAVE_CONFIG);
Mobius.cpp:	ThreadEvent* te = new ThreadEvent(TE_SAVE_AUDIO, file);
Projector.txt:	ThreadEvent* te = new ThreadEvent(TE_SAVE_LOOP);
Script.cpp:		ThreadEvent* e = new ThreadEvent(TE_SAVE_PROJECT, file);

Script.cpp:	ThreadEvent* te = new ThreadEvent(TE_LOAD, file);
Script.cpp:	ThreadEventType event = (mAudio) ? TE_DIFF_AUDIO : TE_DIFF;

Mobius.cpp:	  mThread->addEvent(TE_TIME_BOUNDARY);
Script.cpp:	ThreadEvent* te = new ThreadEvent(TE_ECHO, msg);
Script.cpp:	ThreadEvent* te = new ThreadEvent(TE_PROMPT, msg);

TE_GLOBAL_RESET
seems to have gotten lost along the way

So these are almost all for Script and mostly for the unit tests

TE_TIME_BOUNDARY scheduled at interrupt end if we crossed one

TE_SAVE_CONFIG in Actionator is 
if (a->actionOperator == OperatorPermanent) {


The thread opened it's own OS thread and entered a wait loop that
timed out every 1/10 second.  On wakeup it popped all events in the
queue and processed them.

The handlers would usually call Mobius for the file handling.
so the handlers were all in an non-audio thread

Oh here is TE_GLOBAL_RESET

			case TE_GLOBAL_RESET: {
				// Let the UI know so it can clear any lingering messages.
				// This is kludgey, once we have a better state objet for
				// conveying state we may not need this.  Still events
				// like this are closer to the OSC model so we might
				// want to expand these too.
				mMobius->notifyGlobalReset();


For the TimeBoundary event only we would call the listener

	if (mOneShot == TE_TIME_BOUNDARY) {
		// we crossed a beat/cycle/loop boundary, tell the  UI
		// so it can refresn immediately
		OldMobiusListener* ml = mMobius->getListener();
		if (ml != NULL)
		  ml->MobiusTimeBoundary();
		mOneShot = TE_NONE;

The periodic UI refresh was done here, don't need this now

    // this is typically the UI
	OldMobiusListener* ml = mMobius->getListener();
	if (ml != NULL)
	  ml->MobiusRefresh();


At least Alert while handling another event

							Trace(1, "%s\n", mMessage);
							OldMobiusListener* ml = mMobius->getListener();
							if (ml != NULL)
							  ml->MobiusAlert(mMessage);
							delete p;

prompts notified the Listener
/**
 * Called by Mobius when it gets a prompt back from the listener.
 */
void MobiusThread::finishPrompt(Prompt* p)
{
	if (mPrompts == 0)
	  Trace(1, "Unbalanced call to finishPrompt!\n");
	else
	  mPrompts--;

	// we saved the event in the prompt, complete it now
	ThreadEvent* e = p->getEvent();
	if (e != NULL) {
        ThreadEventType type = e->getType();
		if (type != TE_NONE) {

			// This is one of the few (only) events with a return code
			// it is used to convey the prompt button selection into
			// the ScriptInterpter that is waiting for this event.
			// Since a single "Ok" button is the simplest case, we'll
			// use 0 to mean normal completion, 1 to mean cancel
			int code = (p->isOk()) ? 0 : 1;
			e->setReturnCode(code);

            finishEvent(e);
		}
	}

	// event will be deleted by the Prompt
	delete p;
}

So on TE_PROMPT, call the listener and wait for a response
something eventually calls finishPrompt and then finishEvent

/**
 * When we're done processing an event, send it back to Mobius
 * so it can notify any ScriptInterpreters that might be waiting on it.
 *
 * This creates an action with a special trigger and target so it can
 * be deferred until the next interrupt.
 */
void MobiusThread::finishEvent(ThreadEvent* e)
{
    Action* a = mMobius->newAction();
    a->trigger = TriggerThread;
    a->setTarget(ActionScript);

    // this is a little unusual because we use this
    // for an input to the action and it's usually a return
    a->setThreadEvent(e);

    mMobius->doAction(a);
}


The response ThreadEvent is then put in an action and processed.

So...

Internal component creates a ThreadEvent and calls addEvent
Later in the UI thread the event is consumed and something happens
finishEvent is called inernally and generates (and probably queues)
an Action

ThreadEvents seem to always be initiaited by the ending.

Responses are usually done internally by calling Mobius.

The few that escape to the UI are: Prompt

Only the engine creates and adds ThreadEvents
The "shell" processes most of them
A few escape to the UI through the Listener

finishPrompt was the only that needed the UI to respond:

    /**
     * Called by the UI when it is done processing a prompt.
     * Ownership of the Prompt passes to Mobius.
     */
	virtual void finishPrompt(Prompt* p) = 0;


KernelCommunicator can be used for all of this now

Since almost all are handled internally make a KernelEvent handler.

Rename ThreadEvent KernelEvent or KernelRequest

what KernelMessage doesn't have is the notion of reponse carrying?

Phase one would be a KernelMessage of type MsgRequest
whose argument is a KernelRequest aka ThreadEvent.

Need an event pool since kernel is the one allocating these

The flow is contorted and Function based:

  UI create a Function Action for SaveCapture
  CaptureFunction calls Mobius::saveCapture and passes along the Action
  Mobius::saveCapture
     expects the file name in the Action
     schedules a TE_SAVE_AUDIO event
     and also points the Action to it

	ThreadEvent* te = new ThreadEvent(TE_SAVE_AUDIO, file);
    if (action != NULL)
      action->setThreadEvent(te);

	mThread->addEvent(te);


    MobiusThread finds the ThreadEvent

			case TE_SAVE_AUDIO: {
				// unlike captured scripts we do NOT own this
				Audio* a = mMobius->getCapture();
				if (a != NULL) {
					const char* path = getFullPath(e, NULL, ".wav");
					if (path == NULL)
					   path = getRecordingPath();

					a->write(path);
					Trace(2, "Saved recording to %s\n", path);
and saves the file

A mroe direct way to do this would be to have SaveCapture intercepted
by MobiusShell and have it process it directly without going down toa Function
then bac k up through a ThreadEvent.  This would
work for a lot of them.

but not for scripts, the MobiusThread is the only way to get
Mobius to do something.
