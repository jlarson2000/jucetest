Really not liking mobius-redirect to locate things for unit tests.
That's fine for debugging where you need to redirect the executable location
back to the source tree, but not just to get mobius.xml since that drags everything
else along with it.  What we fundamentally need is:

   UnitTestRoot
     the absolute file path to a folder containng the captured audio files,
     sample files and scripts that run the unit test

     this is normally in a different Git repo than the main source tree

This is also where transient runtime results will be kept.

Don't want to use MobiusRoot redirects for this since there can be other
things in MobiusRoot besides mobius.xml that we don't want to duplicate
since the entire Root shifts.

Within MobiusRoot, there can be a file that says where the UnitTestRoot is
formerly had that in MobiusConfig but that makes it kind of hidden and we don't
need that to be an editable parameter.

Can put this in RootLocator or UnitTests.

For testing, can maingain test scripst under the Root source tree, but this
is not required.  Tests can't load themselves from files, there must still be
a ScriptConfig that causes them to be loaded.

UnitTestSetup is able to slam in a custom ScriptConfig, it could add a ScriptConfig too.

what could be interesting is a sparse MobiusConfig that is merged on top of the
main MobiusConfig only when the unit tests are activated.

Liking that, it makes maintenance easier than hard coding.

Mobius starts up with a mobius.xml normally.  UnitTestSetup locates UnitTestRoot and
parses the mobius.xml file in it.  It then selectively overwrite parts of the memory
MobiusConfig with what came from the overlay file.  This exists only in memory and will
be lost if you edit the config in the UI.

Still a weird bootstrappign problem.  UnitTestSetup can only be called from scripts
right now, there is no bindable function.  So to get that called you must configure
a single script that calls it, then the others can be installed.

This would be cleaner if UnitTestSetup were an actual UIFunction.

Or it could be a Menu item, it doesn't have to be a button.
Or an intrinsic.

However we get this loaded the SampleConfig and ScriptConfig must be
allowed to have relative path names that get expanded at runtime.

<SampleConfig>
  <Sample path="samples/gcloop"/>

How is the root specified

<SampleConfig root='UnitTestRoot'>

<Sample path="$UnitTestRoot/samples/gcloop"/>

Like having this on a per sample basis.  Without a prefix:

<Sample path="samples/gcloop"/>

file is relative to the main Root.

$Root/samples/gcloop is the same as samples/gcloop

This awareness will need to be baked into SampleReader

Same applies for ScriptRef







----------------------------------------------------------------------

Mobius has some old support for unit tests

  Mobius::unitTestSetup
    * Bootstrap and select a standard unit test setup.
    * This is called only by evaluation of the UnitTestSetup script statement.

I see UnitTestSetup is still a ScriptStatement
It calls Mobius::unitTestSetup

It boostraps a Preset and a Setup with special names.
If they exist it resets them:
        p->reset();
        s->reset(p);

And sets both of them in MobiusConfig
    config->setCurrentPreset(p);
    config->setCurrentSetup(s);

If it created them it saves MobiusConfig

    if (unitTestSetup(mConfig))
      writeConfiguration(mConfig);

Since we don't go back to files from this point forward I'm not seeing why
this needs to be persisted.

It does some noise about the difference between the upper config and the interruptConfig
that we don't need.

If there was a listsner it calls MobiusConfigChanged


That's really it for code support.

There were several mobius.xml variants for the unit tests.

Samples were:
  <Samples>
    <Sample path='d:/dev/mobiustest/base.wav'/>
    <Sample path='d:/dev/mobiustest/medium.wav'/>
    <Sample path='d:/dev/mobiustest/medium2.wav'/>
    <Sample path='d:/dev/mobiustest/short1.wav'/>
    <Sample path='d:/dev/mobiustest/short2.wav'/>
    <Sample path='d:/dev/mobiustest/long.wav'/>
    <Sample path='d:/dev/mobiustest/gcloop.wav'/>
  </Samples>

Everything else looked pretty standard
Didn't see any latency overrides

unitui.xml had some buttons

  <Buttons>
    <Button function='Reset'/>
    <Button function='GlobalReset'/>
    <Button function='Record'/>
    <Button function='Overdub'/>
    <Button function='Undo'/>
    <Button function='Redo'/>
    <Button function='Mute'/>
    <Button function='Multiply'/>
    <Button function='InstantMultiply2'/>
    <Button function='Replace'/>
    <Button function='Speed'/>
    <Button function='Reverse'/>
    <Button function='SUSReverse'/>
    <Button function='Shuffle'/>
    <Button function='NextLoop'/>
    <Button function='Expression Tests'/>
    <Button function='Function Tests'/>
    <Button function='In Sync Tests'/>
    <Button function='Jump Tests'/>
    <Button function='Mute Tests'/>
    <Button function='Speed Tests'/>
    <Button function='Out Sync Tests'/>
    <Button function='All Unit Tests'/>
    <Button function='Flattening Unit Tests'/>
    <Button function='Reverse Flattening Unit Tests'/>
    <Button function='Segment Unit Tests'/>
    <Button function='Reverse Segment Unit Tests'/>
    <Button function='Event Tests'/>
  </Buttons>

Script Config had a directory

  <ScriptConfig>
    <ScripRef file='D:\dev\mobiustest'/>
  </ScriptConfig>


So it was using that feature of loading everything in the folder.

These alternate mobius.xml and ui.xml files were swapped in with makefiles?

macunitmobius.xml had some latencies set

<MobiusConfig audioInput='CoreAudio:MOTU 828mk2' audioOutput='CoreAudio:MOTU 828mk2' quickSave='unittest' unitTests='/Users/Jeff/dev/mobiustest' noiseFloor='13' suggestedLatencyMsec='5' inputLatency='289' outputLatency='282' fadeFrames='0' maxSyncDrift='2048' tracks='8' trackGroups='2' maxLoops='4' longPress='500' midiMode='normal' pluginPins='16' shiftRange='48' tracePrintLevel='1' traceDebugLevel='1' driftCheckPoint='loop' dualPluginWindow='true' preset='Default'>

And the boostrapped presets:

  <Preset name='Unit Test Preset'
    moreLoops='4'

  <Setup name='Unit Test Setup' active='0'>
    <SetupTrack preset='Unit Test Preset' input='127' output='127' feedback='127' altFeedback='127' pan='64'/>


I kind of dislike having UnitTestSetup welded into the Script model, but whatever.

Old notes:
The unit tests configs should be close to the base install but
with devices, buttons, bindings, and samples used for testing.
You can change the devices and the test script location if necessary but
you should leave the suggest latency values at 5.  The scripts require
specific values for inputLatencyFrames and outputLatencyFrames to match
what was in use when the files were captured.  The tests should set
these but it's a good idea to have the selected audio device be close
to the same.   It may not matter, but I'm not sure what the side effects
would be if Mobius thought it was using an ASIO device with a 256 block
size but you were actually using an MME device with a large block size.


So I think it is expecting a 256 block size and on the mac at least it makes some
slight adjustments, probably after latency calibration.

I'd like to just slam in latency overrides and not have to deal with saving the devices
in special mobius/ui.xml files.  So scripts would do "set inputLatencyOverride" or something.

The only that probably does matter is the audio device block size which is going to
change the length of the old interrupt buffers.

If we can't control that under juce will need to add a layer of virtual buffers to give it the
old size.

I don't think we ever ran unit tests as a plugin.

makefile had a special target:

# install the unit test configuration
unitconfig:
	-mkdir -p "$(PROGRAM_FILES)/Mobius 2"
	cp config/unitmobius.xml "$(PROGRAM_FILES)/Mobius 2/mobius.xml"
	cp config/unitui.xml "$(PROGRAM_FILES)/Mobius 2/ui.xml"
	cp install/config/host.xml "$(PROGRAM_FILES)/Mobius 2"

and for mac

unitconfig:
	cp config/macunitmobius.xml "/Library/Application Support/Mobius 2/mobius.xml"
	cp config/macunitui.xml "/Library/Application Support/Mobius 2/ui.xml"
	cp install/config/host.xml "/Library/Application Support/Mobius 2/host.xml"

I'd really like to avoid this.  Other than buttons and latency it shouldn't matter if
we can boostrap the Preset and Setup to be used.

Maybe a single "unitTestMode" boolean in MobiusConfig

If we got to where there could be multiple SampleConfigs or UIConfigs could do buttons that way.

when the tests run, these are the requirements no matter how they got there

  audio block size 256
  input/output latency overrides
  samples from a pre-defined set
  buttons from a pre-defined set

I did tweak the configs at runtime and has some makefile targets
to capture those for next time.  So basing these on .xml files that somehow get
merged with the real .xml files could work

  mobius.xml, ui.xml
    - as they usually are

  unittest.xml
    - special "overlay" file that is applied to MobiusConfig UIConfig after they are loaded
    - problem here is that the config UI doesn't know about this so it would overwrite
      the main files if you saved anything

Maybe could just do this at runtime, MobiusConfig/UIConfi is loaded normally.
If the UnitTestSetup button is pressed it changes the memory model but not the files.
If you edit anything those will be lost and you have to press the button again.

----------------------------------------------------------------------
Looking at the old test scripts

"set inputLatency" is used, need to implement that
Echo is used extensively, if you're running under VStudio this will
have the usual problems.  maybe have that duplicated to stdout and Trace

GlobalReset and UnitTestSetup must work

set noExternalAudio true
set quickSave synctest

will need noExternalAudio, not sure about quickSave

Add something to MobiusConfig to root all paths so we don't have to rely on relative

baseTestFolder or something or maybe even two for Windows and Mac

  # an enum
  if quantize != off
    echo ERROR: Unable to resolve parameter: quantize
  endif

Will need to be able to get non-ordinal parameter values

  if 8thsPerCycle != 4
    echo ERROR: Unable to resolve parameter: 8thsPerCycle $(8thsPerCycle)
  endif
  
  if moreLoops != 4
    echo ERROR: Unable to resolve parameter: moreLoops
  endif

ugh, using old names, will have to add aliases back or change the scripts


Yes, start with exprtest.mos, that does a lot without involving audio

!name Expression Tests
!autoload

These didn't seem to use !button but they did use !autoload

!autoload seems to be handled here

void ScriptInterpreter::setScript(Script* s, bool inuse)
{
	reset();
	mScript = s;

	// kludge, do not refesh if the script is currently in use
	if (!inuse && s->isAutoLoad()) {
        ScriptCompiler* comp = new ScriptCompiler();
        comp->recompile(mMobius, s);
        delete comp;
    }

    ScriptBlock* block = s->getBlock();
    if (block != NULL)
      mStatement = block->getStatements();
}

Can't really force the sample rate as that will mess up sync that
tries to align with the audio buffers.


---

Back to automated setup
  anything with a parameter is easy
  Preset, and Setup are easy to extend

Samples, Buttons, ScriptConfig are the hard ones since there is only
one of those in the config files.

Samples would be useful to support more than one set with an active set.

Same for buttons but less so.

At the very least a UnitTestSetup function or script statement can
read secondary files and merge/overwrite the standard files so you
don't have to copy them on the command line before running tests
like I did with makefiles.

<UnitTestSetup>
  <Samples>...
  <ScriptConfig>...
  <BindingSet>
     <Binding...buttons...

OR just have parallel files ui.xml ui-unit.xml mobius.xml mobius-unit.xml etc.
and use one or the other early in initialization.  Yes, that's eaiest, the rest
of the system thinks it is dealing with a normal file, it just came from somewhere
non-standard.  Possible configuration

   configFileVariant='unittest'    ->  mobius-unittest.xml
   configFileVariant='mactest'
   configFileVariant='mylaptop'

The parameter could be set in scripts or an action, and result in a Listener callback
to the UI to rebuild buttons.

change to MobiusConfig would just look like a normal edit
actually so could ui.  Changing the name of a source file is the same as editing
the standard object and making a bunch of changes.

I'm liking just having the full file rather than depending on a suffix:

    mobiusConfigFile='foo.xml'    completely replaces the runtime and editing config
    uiConfigFile='myui.xml'

If not absolute, locate within the installation directory if we can determine that.

An auto-populated menu would be sweet but we'd need to make assumptions about what
files found in a folder mean, we're back to a prefix naming convention, or requiring
that they contain some easilly testable declaration

No, need a single "rootdir" redirect.

When the application starts, there must be a derived root dir from the environment.
Still need to work out where that comes from.  Old Mobius made assumptions about
installation conventions on Mac, Windows may have used the registry not sure.

Once there, look for a "redirect" file.  The file contains a single line containing
the absolute path to a folder containing mobius.xml and  ui.xml.

System config objects that contain file paths need to allow relative paths.  This
would be relative to either the installation directory or the redirect folder.

Okay if editting the .xml files in the editor adds some with absolute paths, but the
relative paths need to preserved through the editor.

Keep that in

  Supervisor::getRootDirectory

SampleConfig is easy because it must have an entry for each file.

ScriptConfig has historcally wanted to load everything in the folder but we don't
have to continue that.

Supervisor can consult various things to find the default root.  Current working,
well known installation path, environment variable.  There it looks for redirect.
System should not need to deal with both, but I suppose it might, so need to save and
expose two paths:

   Supervisor::getDefaultRoot
   Supervisor::getCurrentRoot

These can be exposed through MobiusContainer for almost all code.  Would be nice to use
this for things besides Mobius: mobu, debug window, etc.  though really only mobu needs one atm.

Factor a little utility class outside Supervisor for this so it's easy to drop elsewhere.

RootLocator or something

What does Juce provide?

juce::File has some things:

  File::getCurrentWorkingDirectory 
  File::getSpecialLocation
    userHomeDirectory, userDocumentsDirectory, etc.
    currentExecutableFile


juce::SystemStats has interesting info about the OS, but it's runtime not compile time

The base application class: juce::JUCEApplication
The MainComponent class  juce::AudioAppComponent

Yeah, not seeing anything...start with what File gives us


    


----------------------------------------------------------------------



* The structure of the old test direcrory was:
 * 
 *     ./            script source files and output .wav files from the tests
 *     ./expected    correct .wav files for comparision
 *
 * There was a global UnitTestsParameter that I think was used to specify
 * the location of the scripts and the master files, with test runtime results
 * being deposited in the CWD.
 *
 * Whatever we did, I'd like it to work so that the unit test scripts and
 * master comparision files live in a different Git repository as they did before.
 * To avoid CWD dependencies, this directory will contain test run results.
 *
 *    ./results
 *
 * This impacts the behavior of any Save and Load functions that might
 * be of general use outside the unit tests, since those need to have
 * more control over where the files go.
 *
 * By default these functions assume files are in the root directory
 * which will either be the installation directory, or an OS specific
 * folder used to contain user settings.
 *
 * With mobius-redirect we can now change the entire root to go somewhere
 * else, but wondering if there should be a "unit test mode" or a parameter
 * to point to where the unit tests are so we don't have to use
 * redirects just to run the tests.  Because mobius.xml is accessed so
 * early, and the unit tests need their own stable mobius.xml, there
 * are advantages to using mobius-redirect.  Still it would be nice
 * if the redirect could go to a folder under the main source tree for
 * easier maintenance, but still have the test files located somewhere else.
 *
 * The scripts are small so I don't mind having them in the main source tree
 * but the audio files are massive and need to go somewhere else.
 *
 * Scripts need a way to say "I'm a unit test" which changes the behavior
 * of these functions:
 *
 *     SaveAudio, SaveLoop, SaveProject
 *       Unless the file path is absolute it will save the file
 *       under $UNIT_TEST_ROOT/results
 *
 *     Load
 *        read the file from $UNIT_TEST_ROOT/expected
 *
 *     Diff, DiffAudio
 *       first file is in $UNIT_TEST_ROOT/results
 *       second file is in $UNIT_TEST_ROOT/expected
 *
 * Test scripts must call the UnitTestSetup function, which isn't really
 * a function right now, it's a special statement wired in to the script language.
 * This will set a flag in Mobius that can be tested here to
 * see whether the special file handling needs to be done.
 *
 * Setup Notes
 * 
 * This used to bootstrap a Preset and Setup with a stable
 * configuration, but I'm moving toward just using mobius-redirect for that
 * // Think about not requiring mobius-redirect just to run tests.
 * UnitTestSetup can just as easilly force the load of a MobiusConfig
 * from anywhere without needing to redirect for general use.
 * 
 * The tests need to know the location of the "unit test root" which
 * is different from the standard root and is where the test result
 * files go and the expected files live.  There are a few ways this could work
 * 
 * UnitTestSetup argument
 *    make the tests pass the absolute path to the directory
 *    inconvenience for the test writer and makes different machines harder
 * 
 * Root relative
 * 
 *   test files are expected to be relative to the standard system root
 *   putting it under the root is awkward for development since Git sees
 *   them and you have to add .gitignores to make it stop getting excited
 * 
 * These are going to be in a different Git repository so unwinding
 *   out of the development tree would look like this:
 * 
 *   Typical dev directory
 *      c:/dev/mobiusrepo/mobius/Source
 *   Relative test directory
 *      c:/dev/mobiustest
 * 
 * This doesn't work so well if you want to run tests from a normal
 * isntallation rather than the dev tree.  The root location the
 * is something like /Library/Application Support on Mac
 * and c:/Program Files?...  on Windows and we don't want to mess
 * with putting test files there.
