
Trace tool

----------------------------------------------------------------------
Simple non-buffered trace

bool TraceToDebug = true;
bool TraceToStdout = false;

ToDebug sends trace message to the OutputDebugStream on Windows
or to stderr on Mac.  It is mostly useful on Windows when combined
with that debug output stream viewer from SysInternals.

ToStdout just sends to stdout, which was never very useful since
VisualStudio won't display it when running.

vtrace() uses va_list
trace() calls vtrace with ... args

I occasionally use these in early stage code, but almost always
used buffered Trace instead.

----------------------------------------------------------------------
TraceBuffer
  simple thing that provides a add/print methods with an mIndent level
  just prints to stdout
  must not use have used this, can be deleted

----------------------------------------------------------------------
Trace Records

/**
 * Trace records at this level or lower are printed to the console.
 */
int TracePrintLevel = 1;

/**
 * Trace records at this level or lower are sent to the debug output stream.
 */
int TraceDebugLevel = 1;


We don't need to mess with PrintLevel any more.  It is only usefull when
in control over the command line and no one besides me used that.  Doesn't
work under VStudio.

Once DebugWindow is ready, can use that for everything.

Buffered trace should be independent of where it goes, can have a few options
to redirect to stdout, stderr, DebugOutputStream, or DebugWindow

So for Mobius, there is only TraceLevel

0 means no trace
1 emits ERROR
2 for most things
3 for ?
4 for extreamly detailed rapid trace

/**
 * When set, trace messages for both the print and debug streams
 * are queued, and the listener is notified.  The listener is expected
 * to call FlushTrace eventually in another thread.
 */
TraceListener* NewTraceListener = nullptr;

It's not so new any more so can skip that.

Ring buffer of TraceRecords, this will be a big static block
TraceRecord TraceRecords[MAX_TRACE_RECORDS];

#define MAX_TRACE_RECORDS 10000
#define MAX_ARG 64
    char string[MAX_ARG];
	char string2[MAX_ARG];
	char string3[MAX_ARG];

10,000 may be a lot.  Nice to have this dynamic but need a smart pointer.




/**
 * A default object that may be registered to provide context and time
 * info for all trace records.
 */
TraceContext* DefaultTraceContext = nullptr;

This was confusing.  

/**
 * The interface of an object that may be registered to provide
 * application specific context for the trace records.
 */
class TraceContext {
	virtual void getTraceContext(int* context, long* time) = 0;
};

The intent here was to include extra numbers to identify where
in Mobius this was coming from.  time was probably a frame counter.

The "context" integer says it was loop number.  If we're going to do this
it would be nice to have both track and loop, and actually just track.
What loop you're in matters less than track.

There is also trace outside of track that doesn't need to bother with those
numbers so need to have context inclusion optional.

