Mobius::propagateConfiguration
  when we propgate the Setup, what happens if tracks are not in reset?
  currently expect globalReset before we propgagate anything, but we could
  do just the tracks that are in reset early
  oh god, propagateConfigration/propagateSetup, and Track::udpateConfiguration
  are a huge mess, sort this out

Automatic script waits
  unit tests frequently want to do things that have to be pushed to the
  maintenance thread, and they always have to add a "Wait thread" after it
  would be nice to have the wait be done implicitly without a Wait statement
  especially for UnitTestSetup if that's where samples are loaded

Intrinsic script functions
  with the introduction of InstallSamples that must be called from a script
  we have to either add a ScriptStatement for that, or we need a static Function
  object like we do for a few others to get it to resolve to something
  would be nice to have intrinsic functions like we do up in the shell down
  in the kernel for scripts 

Capture/Bounce
  stopCapture is only looking at port zero

UserVariables
  this is an absolute mess, so much dynamic allocation going on in ScriptInterpreter

Action::getMidiChannel, etc.
  this is all a huge mess and unfortunately used by FunctionUtil, Pitch.cpp and Speed.cpp
  redesign this at some point

ScriptRuntime
  ScriptInterpreters are still created and deleted dynaically
  need to use a pool

Mobius::getSampleRate
  what actually cares about this?
  a few things wanted this to put into an Audio before saving the file,
  that can be added much higher
  a few things need it to do tempo calculations
  
Mobius::getState
  - don't need to be returning OverlayBindings?  Well I guess a script
    could have changed them

Mobius::setCustomMode
  vaguely remember this, scripts can invent their own modes and want the UI
  to display them

Stream::capture
  writes Audio to file

Git MidiListener drug in for something, revisit everything that
thinks about Midi

Project::readAudio
  files

ProjectLayer::ProjectLayer
  calls Audio::copy which would to MASSIVE memory allocation
  we're going to have to rethink about how save/load works in general,
  Can't have the interrupt handler doing memory, though since projects are rare
  glitches during save/load aren't that bad, still what does it
  mean to save a project when you have a live loop running?

  could have the shell put the core in some sort of suspended state then
  carefully touch the internal structures in the UI thread

  that's really the way this has to work, save/load/project must live entirely
  in the shell thread, move it out of core to reinforce this
  
