
Standalone hardware config
  need to remember audio and midi device settings
  keep this out of mobius.xml
  devices.xml
  boostrap an entry for every machine it runs on
  need to start forcing the sample rate for unit tests
  take the device stuff out of MobiusConfig except for
    midi devices to open as a plugin

  audio devices will never change on a host but MIDI devices
  could move around, still makes sense to save them in the host config
  
UnitTests
  Laptop audio device comes up with a 48k sample rate, can that be influenced?
  If the MobiusContainer sample rate doesn't match what is stored in the .wav
  file should warn.

  don't bother resolving SampleConfig if we're not going to load it?
  probably still need to though to do diff checking


Audio file writer that tries to go in blocks instead of one sample at a time

Alerts
  now that we have file handling there are things that can go wrong
  that the user will need to know about
  see alerts.txt
  give MobiusListener a simple error reporting mechanism and leave
   and let it decide whether to use a popup or just show it on the display
   for 10 seconds
   
Audio::~Audio() 
  calls freeBuffers to return the buffers to the pool so can't
  delete the pool before this
  HATE this
  Changing the way AudioPool works I think is going to be required
  before general release


When TriggerState ends long press tracking we don't always
want the up action propagated any further, it just cancles
the long wait.  Verify this.

Have an unexpectedly high number of max kernel events passing between the layers

---

Bad leak after attempting long-press Record a few times
  doesn't have to be long, just do
    Record, Record
    let it play a little
    Record, Record
    Reset

So starting Record while a loop exists leaks


Mobius::finishPrompt
  redesign prompting and for that matter all file handling
  
Script/WAIT_SCRIPT
  old comments suggest this isn't necessary any more now that
  we have "Wait thread"  see if we can delete this
  
Script/WaitType/WAIT_THREAD
  should be WAIT_EVENT now

Mobius::logStatus
  used to be called by MobiusThread at periodic intervals, probably
  used only briefly during testing. can get rid of this, or redesign it
  to be more useful
  used TraceBuffer which has been removed, dump() cascaded from Track to
  Loop, Layer, Segment, and Audio

Mobius::addMessage
  old way to let scripts send messages to the UI
  did this ever work?
  needs redesign, use KernelEvent and think about a more flexible alerting
  mechanism, related to Prompt
  What would be nice is to allow scripts to display a message that times out,
  popping up an alert would be annoying, could just be part of MobiusState
  

KernelEvent
  I'm not liking how we keep a pointer to the KernelEvent in thee ScriptInterpreter for waiting, then let it escape to the UI, and the UI assumes that will remain valid indefinitely.  Engine shouldn't delete it out from under it, but the dependency is subtle and fragile.  

SampleManager plays into the input buffer, which causes input monitoring
to bounce, not innacurate really, but should we do monitoring at a higher
level and ignore what SampleManager does?
  - yes to higher level

For each of the major subcomponents
  ScriptInterpreter, Synchronizer, Actionator, Track
  organize the top part of the files according to
     initialize
     reconfigure
     audio buffers
     other stuff

StateExporter
  move top-level logic in here, consider pulling the component
  specific exporters: Track, Loop, Layer, EventManager
  into one place

TrackManager
  is there enough to have a subcomponent?

Parametizer
  Handle getParameter, UIParameter mapping
  - leave in Actionator for now, there isn't much there
  
Variables
  hating these, at least condider generating but the logic
  isn't as regular as Parameter

----------------------------------------------------------------------

Got a single 32k block leaking from somewhere

Explore that other guy's meter

Since we no longer use Parameter for the UI, and have moved bindings up
is there any need for the old getHigh, getOrdinalLabel, etc?  Weed them.
Unless scripts need them.
  sigh, yes OperatorHigh needs getHigh

Sure would be nice to  factor Action and Export handling out of them so
we could share the model.

Go over the stuff in new and see what was used

