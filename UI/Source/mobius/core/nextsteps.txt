
action->id for scripts has the pointer-to-long lossage
  add action->script pointer for this

TriggerUI could be sustainable or not
  if we assume sustainable, then each action button needs a unique id
    could be the ordinal of it's location in the button list
  if we allow selective sustain on some buttons but not others
    still need unique ids if sustainable, but if not sustainable
    an completely skip trigger tracking

Unclear whether host bindings should be sustainable or not.  Since they're
ultimately just moving a CC from 127 to zero, it could do that, but not all host
parameters behave that way so it would need to be a binding setting.

Action->id is only necessary for sustainable triggers with sustainable targets
  if either of those is false, then we will never track this trigger
  and it won't need an id

The system must make no assumptions about what trigger->id means, it's just a unique number

TriggerState in action is the only thing that cares about this

May need a binding option if a source in general can be sustainable (UI Button) but
each binding is different.

Still don't like that some functions have SUS variants.  If you bind a SUS function
to a trigger that can't be sustained, then it should behave like the non-SUS variant.

However, if you bind a non-SUS function to a sustainable trigger, it doesn't mean
it can BECOME a SUS function.  That would have to be added in the binding.  which
is nice because it means we can get rid of SUS functions.  Part of the function
definition is "is sustainable".  Meaning it can be sustained but doesn't have to.
the decision is left to the binding.  and the option to make the binding sustainaned
tests "is sustainable" to even offer that option.


---

Long press record broke along the way
  need to completely rethink trigger handling and move as much
  as possible out of core

Bad leak after attempting long-press Record a few times
  doesn't have to be long, just do
    Record, Record
    let it play a little
    Record, Record
    Reset

So starting Record while a loop exists leaks


Mobius::finishPrompt
  redesign prompting and for that matter all file handling
  
Script/WAIT_SCRIPT
  old comments suggest this isn't necessary any more now that
  we have "Wait thread"  see if we can delete this
  
Script/WaitType/WAIT_THREAD
  should be WAIT_EVENT now

Mobius::unitTestSetup
  this is all ugly and could stand some cleanup
  
Mobius::logStatus
  used to be called by MobiusThread at periodic intervals, probably
  used only briefly during testing. can get rid of this, or redesign it
  to be more useful
  used TraceBuffer which has been removed, dump() cascaded from Track to
  Loop, Layer, Segment, and Audio

Mobius::addMessage
  old way to let scripts send messages to the UI
  did this ever work?
  needs redesign, use KernelEvent and think about a more flexible alerting
  mechanism, related to Prompt
  What would be nice is to allow scripts to display a message that times out,
  popping up an alert would be annoying, could just be part of MobiusState
  

KernelEvent
  I'm not liking how we keep a pointer to the KernelEvent in thee ScriptInterpreter for waiting, then let it escape to the UI, and the UI assumes that will remain valid indefinitely.  Engine shouldn't delete it out from under it, but the dependency is subtle and fragile.  

SaveCapture is a mess
  Mobius::getCapture has race conditions with audio thread and shell has
  to be careful not to delete the Audio



SampleManager plays into the input buffer, which causes input monitoring
to bounce, not innacurate really, but should we do monitoring at a higher
level and ignore what SampleManager does?
  - yes to higher level

Revisit setSetupInternal tail end of propagateConfiguration is a mess

For each of the major subcomponents
  ScriptInterpreter, Synchronizer, Actionator, Track
  organize the top part of the files according to
     initialize
     reconfigure
     audio buffers
     other stuff

StateExporter
  move top-level logic in here, consider pulling the component
  specific exporters: Track, Loop, Layer, EventManager
  into one place

Capture/Bounce
  move to a subcomponent?

Scriptarian
  still enough in Mobius to warrant a subcomponent

TrackManager
  is there enough to have a subcomponent?

Parametizer
  Handle getParameter, UIParameter mapping
  - leave in Actionator for now, there isn't much there
  
Functionator
  handle the combined function/script map
  not much more here, Actionator does almost everything
  same with Parametizer, there's not much more to add, just
  keep everything in Actionator
  UIQuery can evolve there too

Variables
  hating these, at least condider generating but the logic
  isn't as regular as Parameter

----------------------------------------------------------------------


Got a single 32k block leaking from somewhere

Flesh out LayerElement, fix AudioMeter for input add smaller
AudioMeter for track strip output

Explore that other guy's meter

Since we no longer use Parameter for the UI, and have moved bindings up
is there any need for the old getHigh, getOrdinalLabel, etc?  Weed them.
Unless scripts need them.
  sigh, yes OperatorHigh needs getHigh

Sure would be nice to  factor Action and Export handling out of them so
we could share the model.


Go over the stuff in new and see what was used

