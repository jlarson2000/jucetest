//////////////////////////////////////////////////////////////////////
// New-ish initialization, soon to be replaced
//////////////////////////////////////////////////////////////////////

/**
 * Original implementation, soon to be replaced by newInitialize
 * 
 * Called by Kernel at a suitable time after construction to flesh out the
 * internal components.  We now have a MobiusConfig to pull things from.
 *
 * This is called ONLY during initial structure setup and the audio stream
 * will not be active.  We are in the UI thread so it is okay to allocate memory.
 *
 * This is where we would do "light" initialization necessary for the
 * plugin host to probe the plugin for it's interface without actually
 * making it do anything.
 *
 * When the plugin is actually going to be used start() was called.
 * Until we get to plugins, do start() immediately, which in retrospect
 * probably isn't that bad now that we don't do heavyweight stuff like
 * managing audio/midi devices and read/writing files.
 */
void Mobius::initialize(class MobiusConfig* config)
{
    mConfig = config;
    
    // don't need the "pending" concept any more
    mPendingSetup = -1;

	// set these early so we can trace errors during initialization
	TracePrintLevel = mConfig->getTracePrintLevel();
	TraceDebugLevel = mConfig->getTraceDebugLevel();
    // doesn't seem to be maintaining this right, force it on
    TraceDebugLevel = 4;
    
    // is this the equivalent of the old start() ?
    start();
}

/**
 * Do remaining configuration necessary to actually process the
 * audio stream.  Left over from the probe/activate phases
 * plugins go through which we still likely need.
 *
 * Currently called directly from initialize() but may
 * want to separate them.
 *
 */
void Mobius::start()
{
    // will need a way for this to get MIDI
    mSynchronizer = new Synchronizer(this, mMidi);

    // not a true thread any more, but packages some necessary
    // stuff that needs to be redesigned
    mThread = new MobiusThread(this);
    //mThread->start();

    // once the thread starts we can start queueing trace messages
    //if (!mContext->isDebugging())
    mThread->setTraceListener(true);

    // this will trigger track initialization
    // formerly opened devices and loaded scripts
    installConfiguration(mConfig, true);

    // Formerly looked for an init.mos script and ran it.
    // Never used this and it didn't fit well in the new ScriptEnv world.
    // If we want an init script then it should be a registered event
    // script instead.
}

/**
 * Install the configuration. This was called in two contexts.
 * First by initialize()/start() after we've read the config file and now want
 * to process it.
 *
 * Second by the UI after it has edited an external copy of the config object.
 * In this case we need to splice it in carefully since the
 * interrupt handler, MobiusThread, and the trigger threads can still be using
 * the old one.
 *
 * UPDATE: none of that is relevant any more, the config can't be in use
 * by the UI and the KLUDGE warning isn't accurate.
 *
 * !! KLUDGE
 * Since we don't have a reliable way to to know whether the current
 * config object is in use by the UI, MobiusThread, or trigger threads
 * we can't safely delete the old config object immediately.  Insteaed
 * maintain a history of them.  Eventually the old ones can be removed
 * though it's still a guess as to when nothing will be referencing it.
 * Since setConfiguration is only called when you interact with the
 * UI dialogs in practice there shouldn't be very many of these and
 * comapred to the audio buffers they don't take up much space
 *
 * TODO: to be completely safe we need a csect around this to prevent
 * concurrent mods to the history list. In practice that's almost impossible
 * because all dialogs are modal.
 *
 */
void Mobius::installConfiguration(MobiusConfig* config, bool doBindings)
{
    // Sanity check on some important parameters
    // TODO: Need more of these...
    if (config->getTracks() <= 0) {
        Trace(1, "Fixing track count\n");
        config->setTracks(1);
    }

	// Build the track list if this is the first time
	buildTracks(config->getTracks());

    // UPDATE: The mPendingInterruptConfig concept is no longer necessary
    // but it resulted in a subtle order of execution I'm preserving until
    // we can think harder about how this needs to work.  We'll set the
    // "pending" config as before, and propagateInterruptConfig will
    // apply those changes later when beginAudioInterrupt is called.
    // 
    // old comments:
    // !! I'm sure there are some small race conditions below where
    // we're making structural changes to tracks and such that may
    // not match what is in the active mInterruptConfig.
    // Find out what those are and move them into the interrupt.
    // mInterruptConfig will have been set
    Trace(2, "Mobius: phasing in MobiusConfig changes\n");
    if (mPendingInterruptConfig != NULL) {
        // this shouldn't happen any more unless Kernel isn't
        // calling us properly
        if (mInterrupts > 0) 
          Trace(1, "Mobius: Overflow installing interrupt configuration!\n");
        else {
            // this isn't a copy now
            //delete mPendingInterruptConfig;
        }
    }
    // no longer a copy
    mPendingInterruptConfig = config;
    
    // TODO: needs to be done differently, at least remove file handling
	// load the scripts and setup function tables
    if (installScripts(config->getScriptConfig(), false)) {
        // if scripts changed, then force the bindings to be rebuilt too
        // !! should also force the MobiusPluginParameters to be rebuilt
        // since they can be referencing the old RunScriptFunction objects,
        // as it is they will continue to ref the old scripts

        // UPDATE: we're not managing bindings down here any more, though
        // the old Action stuff might need this?
        //doBindings = true;
    }

    // update focus lock/mute cancel limits
    // update: focus lock has moved up, still need mute cancel
    // but it doesn't have to be done down here
    updateGlobalFunctionPreferences();

	// global settings
    // These are safe to set from anywhere don't have to wait for an interrupt
    // UPDATE: no longer have a difference between "trace" and "print"
	TracePrintLevel = config->getTracePrintLevel();
	//TraceDebugLevel = config->getTraceDebugLevel();
    // force this on until we get configuration right
    TraceDebugLevel = 2;
    
    // !! this could cause problems if we're in the middle of saving
    // a project?  Would need to coordinate this with MobiusThread
    // TODO: shouldn't be dealing with this at this level, and
    // Audio doesn't write any more anyway
	//Audio::setWriteFormatPCM(config->isIntegerWaveFile());

    // removed device opening and Recorder init
    
	// If we were editing the Setups, then it is expected that we
	// change the selected track if nothing else is going on
    // !! seems like there should be more here, for every track in reset
    // the setup changes should be immediately propagated?
    if (!config->isNoSetupChanges()) {
        bool allReset = true;
        for (int i = 0 ; i < mTrackCount ; i++) {
            Track* t = mTracks[i];
            Loop* l = t->getLoop();
            if (l != nullptr) {
                if (!l->isReset()) {
                    allReset = false;
                    break;
                }
            }
        }
        if (allReset) {
            int initialTrack = 0;
            Setup* setup = GetCurrentSetup(mConfig);
            if (setup != NULL)
              initialTrack = setup->getActiveTrack();
            setTrack(initialTrack);
        }
    }
}

/**
 * Called by installConfiguration whenever the configuration changes.
 * Originally we tried to follow the track count from the configuration
 * at runtime.  Unfortunately this has race conditions with the 
 * interrupt thread that may be using those tracks at the same time.
 * 
 * We could probably work through those but it's safest just to require
 * a restart after changing the track count.  Until the restart we'll
 * continue using the original track count.
 * as they may have changed.
 *
 * UPDATE: Can't have race conditions any more since we're always at the
 * start of an interrupt.  Remove the paranioa and just reconfigure the tracks.
 */
void Mobius::buildTracks(int count)
{
	int i;

    if (mTracks != NULL) {
        // Another way to make this safer is to just preallocate mTracks at
        // the maximum size and don't ever reallocate it, then just
        // change mTrackCount?
        if (mTrackCount != count) {
            Trace(2, "Mobius: Ignoring track count change to %ld until after restart\n",
                  (long)count);
        }
    }
    else {
        // must have at least one, should have fixed this by now
        if (count <= 0) count = 1;

        // limit this while testing leaks
        //count = 1;

        Track** tracks = new Track*[count];

        // IMPORTANT: This is the key connection point between Recorder and core
        Recorder* rec = mKernel->getRecorder();
        
        for (i = 0 ; i < count ; i++) {
            Track* t = new Track(this, mSynchronizer, i);
            tracks[i] = t;
            rec->add(t);
        }
        mTracks = tracks;
        mTrack = tracks[0];
        mTrackCount = count;
    }
}

/**
 * Assimilate changes made to an external copy of the configuration object.
 * This is intended for use by the UI after it has created a clone
 * of the system config object and modified it.  
 *
 * !! Consider passing in the parts that were modified so we can avoid
 * unnecessary work?
 *
 * UPDATE: Yeah, we're not going to pass parts, but could be smarter
 * about doing differencing at a higher level, or receiving UI hints
 * and responding to those.
 *
 * Not used currently, need to redesign under reconfigure()
 *
 */
#if 0
void Mobius::setConfiguration(MobiusConfig* config, bool doBindings)
{
    installConfiguration(config, doBindings);

    // If the track count changed, send the UI an alert so the user
    // knows they have to restart.  This can only be done from the UI thread
    // which is the only thing that should be calling setConfiguration.

    if (config->getTracks() != mTrackCount) {

        // Alert handler must either process the message immediately or
        // copy it so we can use a stack buffer
        // UPDATE: should be handled higher
        char message[1024];
        sprintf(message, "You must restart Mobius to change the track count to %d", config->getTracks());
        if (mListener != NULL)
          mListener->MobiusAlert(message);
    }
}
#endif

/**
 * Load the scripts and initialize the global function tables.
 * This is called every time the configuration changes so try to be smart
 * about detecting differences to avoid excessive script loading.
 * 
 * We have a host of dependency issues on the old environment so deleting
 * the old one is very difficult to do reliably.  In particular, 
 * the current BindingResolver will be referencing Script objects and
 * the plugins may have some MobiusPluginParameter proxies that reference
 * Scripts too.  And of course there may also be active script threads.
 * 
 * Until we can refine the interfaces to the point where we have a single
 * place to reliably phase in parts of the config and update the 
 * dependencies, we'll have to maintain these on a history list.
 *
 * TODO: Obviously a lot of work to do here.  I think we can factor
 * out all of the race conditions and avoid the history list, but
 * file handling needs to be moved up.
 *
 * update: BindingResolver is gone for whatever good that does
 * force flag will be unused
 */
bool Mobius::installScripts(ScriptConfig* config, bool force)
{
    bool changed = false;

    if (mScriptEnv == NULL || force || mScriptEnv->isDifference(config)) {
        changed = true;

        if (mScriptEnv == NULL)
          Trace(2, "Mobius: Loading scripts and function tables\n");
        else
          Trace(2, "Mobius: Reloading scripts and function tables\n");

        // !! memory management on the ScriptCompiler
        // at the very least this could be a member object on the stack
        ScriptCompiler* sc = new ScriptCompiler();
        ScriptEnv* env = sc->compile(this, config);
        delete sc;

        // add it to the history, should use a csect but script configs
        // can't come in that fast
        env->setNext(mScriptEnv);
        mScriptEnv = env;

        // rebuild the global Function table
        // in theory we could have an outstanding reference to mFunctions
        // at the moment, but that would only be for the UI dialogs and script
        // compilation which in practice we won't be doing right now
        // ugh, please don't make me have another history list...
        initFunctions();

        // rebuild the global parameter table
        initScriptParameters();

        // at this point, old comments mention updating ResolvedTargets
        // to point to new Script objects, I think that was done
        // in BindingResolver which is gone.  Cross that bridge later
        // yes, see save/binding-resolver-use, it replaces Script pointers
        // in ResolvedTargets i hate ResolvedTargets soo much
        // we can remove references to config Structures easily
        // but scripts are hard, really should only be updating ScriptConfig
        // in a state of global reset
    }

    return changed;
}

/**
 * Initialize script parameters after installing a ScriptEnv.
 *
 * TODO: I forget what this does, can a script define Parameters that
 * behave like static Parameters?
 */
void Mobius::initScriptParameters()
{
    if (mScriptEnv != NULL) {
        for (Script* script = mScriptEnv->getScripts() ; script != NULL ; 
             script = script->getNext()) {

            if (script->isParameter()) {

                ScriptBlock* b = script->getBlock();
                if (b != NULL) {
                    for (ScriptStatement* st = b->getStatements() ; st != NULL ; 
                         st = st->getNext()) {

                        if (st->isParam()) {
                            // where should this logic go?
                            addScriptParameter((ScriptParamStatement*)st);
                        }
                    }
                }
            }
        }
    }
}

/**
 * Promote one script parameter we found in a script.
 * Currently this is only being done with the entire ScriptConfig
 * is reloaded.  Due to the awkward cross reference between
 * Parameter and ScriptParamStatement !autoload is disabled for 
 * any file that contains a Param.  Need to work this out...
 */
void Mobius::addScriptParameter(ScriptParamStatement* s)
{
    const char* name = s->getName();

    if (name != NULL) {
        Trace(1, "Promoting user defined parameter: %s\n", s->getName());

        ScriptBlock* block = s->getChildBlock();
        if (block != NULL) {
            ScriptDeclaration* decls = block->getDeclarations();
            for (ScriptDeclaration* d = decls ; d != NULL ; d = d->getNext()) {
                Trace(1, "   %s %s\n", d->getName(), d->getArgs());
            }
        }
    }
    else {
        Trace(1, "Ignoring Param statement without name\n");
    }
}

/**
 * Build out the function list by combining the static function definitions
 * with the scripts.  Called during initialization and whenever the
 * script config changes.
 *
 * NOTE: In theory we could be doing a UI dialog, or compiling a script or
 * something else that is searching the global Functions list at this
 * exact moment but in practice it won't happen and I don't want to mess
 * with another csect for this.
 *
 * This was formerly a static array but this caused problems when the
 * plugin was instantiated more than once because the Script objects
 * would be deleted when one Mobius plugin was shut down but they were
 * still referenced by the other plugin.   We've got similar issues
 * for any system constant that keeps localized names, but those can be
 * copied to private arrays.
 */
void Mobius::initFunctions()
{
    Function** functions = NULL;
	int i;

    // should already be initialized but make sure
    Function::initStaticFunctions();

	// first count the static functions
	// eventually make loop and track triggers dynamnic too
	int staticCount = 0;
	for ( ; StaticFunctions[staticCount] != NULL ; staticCount++);

	// add script triggers
	int scriptCount = 0;
	List* scripts = NULL;
	if (mScriptEnv != NULL) {
		scripts = mScriptEnv->getScriptFunctions();
		if (scripts != NULL)
		  scriptCount = scripts->size();
	}

    // allocate a new array
	functions = new Function*[staticCount + scriptCount + 1];

    // add statics
    int psn = 0;
    for (i = 0 ; i < staticCount ; i++)
	  functions[psn++] = StaticFunctions[i];

    // add scripts
    for (i = 0 ; i < scriptCount ; i++)
      functions[psn++] = (RunScriptFunction*)scripts->get(i);

    // and terminate it
    functions[psn] = NULL;

    // now splice in the new array
    Function** old = mFunctions;
    mFunctions = functions;

    // pause for a moment?
	delete old;

	updateGlobalFunctionPreferences();

    // TODO: this is bad on a number of levels besides memory allocation in the interrupt
}
